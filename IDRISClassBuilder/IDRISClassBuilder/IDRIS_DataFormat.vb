' -------------------------
' --- IDRIS.%DataFormat ---
' -------------------------

' --- This file is automatically generated. Please don't change! ---

Imports System.Text
Imports Arena_DataConn
Imports System.Data.SqlClient
Imports Arena_Utilities.StringUtils

Public Class IDRIS_DataFormat

    ' --- This differentiates local objects from web service objects ---
    ' --- Assume all objects are Local at this point. ---
    Protected IsLocal As Boolean = True

    ' --- Turn this on when filling fields from the database ---
    Protected IsFillingFields As Boolean = False

#Region " Constants "

    Private Shared ReadOnly ObjName As String = System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName

    Private Shared _SQLTableName As String = "[%DataFormat]"
    Private Shared _BaseQuery As String = "SELECT * FROM " + _SQLTableName
    Private Shared _FirstConj As String = " WHERE"
    Private Shared _DeleteQuery As String = "DELETE FROM " + _SQLTableName

    Public Shared ReadOnly Property SQLTableName() As String
        Get
            FixSQLTablename()
            Return _SQLTableName
        End Get
    End Property
    Partial Private Shared Sub FixSQLTablename()
    End Sub

    Public Shared ReadOnly Property BaseQuery() As String
        Get
            FixBaseQuery()
            Return _BaseQuery
        End Get
    End Property
    Partial Private Shared Sub FixBaseQuery()
    End Sub

    Public Shared ReadOnly Property FirstConj() As String
        Get
            FixFirstConj()
            Return _FirstConj
        End Get
    End Property
    Partial Private Shared Sub FixFirstConj()
    End Sub

    Public Shared ReadOnly Property DeleteQuery() As String
        Get
            FixDeleteQuery()
            Return _DeleteQuery
        End Get
    End Property
    Partial Private Shared Sub FixDeleteQuery()
    End Sub

#End Region

#Region " Property IsChanged (Boolean, Internal) "

    Private _IsChanged_Default As Boolean = False
    Private _IsChanged As Boolean = _IsChanged_Default

    Public Property IsChanged() As Boolean
        Get
            Return _IsChanged
        End Get
        Set(ByVal value As Boolean)
            If value Then
                _IsChanged = True
            Else
                _IsChanged = False
            End If
        End Set
    End Property

#End Region

#Region " Property IsNew (Boolean, Internal) "

    Private _IsNew_Default As Boolean = True
    Private _IsNew As Boolean = _IsNew_Default

    Public Property IsNew() As Boolean
        Get
            Return _IsNew
        End Get
        Set(ByVal value As Boolean)
            _IsNew = value
        End Set
    End Property

#End Region

#Region " Property IsDeleted (Boolean, Internal) "

    Private _IsDeleted_Default As Boolean = False
    Private _IsDeleted As Boolean = _IsDeleted_Default

    Public Property IsDeleted() As Boolean
        Get
            Return _IsDeleted
        End Get
        Set(ByVal value As Boolean)
            _IsDeleted = value
        End Set
    End Property

#End Region

#Region " Property ID (Int NotNull) "

    Protected _ID_Default As Nullable(Of Integer) = Nothing
    Protected _ID As Nullable(Of Integer) = _ID_Default
    Protected _ID_Min As Integer = 1

    Public Property ID() As Nullable(Of Integer)
        Get
            FixDefault_ID()
            Return _ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            FixDefault_ID()
            FixValue_ID(value)
            CheckValue_ID(value)
            If (_ID.HasValue <> value.HasValue) OrElse _
               (_ID.HasValue AndAlso _ID.Value <> value.Value) Then
                _ID = value
                If IsLocal AndAlso Not IsFillingFields Then IsChanged = True
            End If
        End Set
    End Property

    Private Sub CheckValue_ID(ByVal Value As Nullable(Of Integer))
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Allow only valid values ---
        If Value.HasValue Then
            If Value.Value < _ID_Min Then
                Throw New SystemException(FuncName + vbCrLf + "Value out of range: " + Value.Value.ToString)
            End If
        End If
        CheckValueMore_ID(Value)
    End Sub

    Protected Shared Sub Validate_ID(ByVal Obj As IDRIS_DataFormat)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Re-check value before saving ---
        Obj.CheckValue_ID(Obj.ID)
        ' --- Allow only valid business logic and database values ---
        If Not Obj.ID.HasValue Then
            Throw New ArgumentNullException(FuncName)
        End If
        ValidateMore_ID(Obj)
    End Sub

    ' --- Partial routines that can be completed in a partial class ---
    Partial Private Sub FixDefault_ID()
    End Sub
    Partial Private Sub FixValue_ID(ByRef Value As Nullable(Of Integer))
    End Sub
    Partial Private Sub CheckValueMore_ID(ByVal Value As Nullable(Of Integer))
    End Sub
    Partial Private Shared Sub ValidateMore_ID(ByVal Obj As IDRIS_DataFormat)
    End Sub

#End Region

#Region " Property TableName (String 20 NotNull) "

    Protected _TableName_Default As String = ""
    Protected _TableName As String = _TableName_Default
    Protected _TableName_Max As Integer = 20

    Public Property TableName() As String
        Get
            FixDefault_TableName()
            Return _TableName
        End Get
        Set(ByVal value As String)
            FixDefault_TableName()
            FixValue_TableName(value)
            CheckValue_TableName(value)
            If _TableName <> value Then
                _TableName = value
                If IsLocal AndAlso Not IsFillingFields Then IsChanged = True
            End If
        End Set
    End Property

    Private Sub CheckValue_TableName(ByVal Value As String)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Default must be valid ---
        If Value = _TableName_Default Then Exit Sub
        ' --- Allow only valid values ---
        If Value IsNot Nothing Then
            If Value.Length > _TableName_Max Then
                Throw New SystemException(FuncName + vbCrLf + "Invalid length: " + Value.Length.ToString)
            End If
            If Value.IndexOf(vbLf) >= 0 Then
                Throw New SystemException(FuncName + vbCrLf + "Not a multiline property")
            End If
        End If
        CheckValueMore_TableName(Value)
    End Sub

    Protected Shared Sub Validate_TableName(ByVal Obj As IDRIS_DataFormat)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Re-check value before saving ---
        Obj.CheckValue_TableName(Obj.TableName)
        ' --- Allow only valid business logic and database values ---
        If Obj.TableName Is Nothing Then
            Throw New ArgumentNullException(FuncName)
        End If
        ValidateMore_TableName(Obj)
    End Sub

    ' --- Partial routines that can be completed in a partial class ---
    Partial Private Sub FixDefault_TableName()
    End Sub
    Partial Private Sub FixValue_TableName(ByRef Value As String)
    End Sub
    Partial Private Sub CheckValueMore_TableName(ByVal Value As String)
    End Sub
    Partial Private Shared Sub ValidateMore_TableName(ByVal Obj As IDRIS_DataFormat)
    End Sub

#End Region

#Region " Property FieldNumber (Int NotNull) "

    Protected _FieldNumber_Default As Integer = 0
    Protected _FieldNumber As Integer = _FieldNumber_Default

    Public Property FieldNumber() As Integer
        Get
            FixDefault_FieldNumber()
            Return _FieldNumber
        End Get
        Set(ByVal value As Integer)
            FixDefault_FieldNumber()
            FixValue_FieldNumber(value)
            CheckValue_FieldNumber(value)
            If _FieldNumber <> value Then
                _FieldNumber = value
                If IsLocal AndAlso Not IsFillingFields Then IsChanged = True
            End If
        End Set
    End Property

    Private Sub CheckValue_FieldNumber(ByVal Value As Integer)
        ' --- Allow only valid values ---
        CheckValueMore_FieldNumber(Value)
    End Sub

    Protected Shared Sub Validate_FieldNumber(ByVal Obj As IDRIS_DataFormat)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Re-check value before saving ---
        Obj.CheckValue_FieldNumber(Obj.FieldNumber)
        ' --- Allow only valid business logic and database values ---
        ValidateMore_FieldNumber(Obj)
    End Sub

    ' --- Partial routines that can be completed in a partial class ---
    Partial Private Sub FixDefault_FieldNumber()
    End Sub
    Partial Private Sub FixValue_FieldNumber(ByRef Value As Integer)
    End Sub
    Partial Private Sub CheckValueMore_FieldNumber(ByVal Value As Integer)
    End Sub
    Partial Private Shared Sub ValidateMore_FieldNumber(ByVal Obj As IDRIS_DataFormat)
    End Sub

#End Region

#Region " Property FieldName (String 50 NotNull) "

    Protected _FieldName_Default As String = ""
    Protected _FieldName As String = _FieldName_Default
    Protected _FieldName_Max As Integer = 50

    Public Property FieldName() As String
        Get
            FixDefault_FieldName()
            Return _FieldName
        End Get
        Set(ByVal value As String)
            FixDefault_FieldName()
            FixValue_FieldName(value)
            CheckValue_FieldName(value)
            If _FieldName <> value Then
                _FieldName = value
                If IsLocal AndAlso Not IsFillingFields Then IsChanged = True
            End If
        End Set
    End Property

    Private Sub CheckValue_FieldName(ByVal Value As String)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Default must be valid ---
        If Value = _FieldName_Default Then Exit Sub
        ' --- Allow only valid values ---
        If Value IsNot Nothing Then
            If Value.Length > _FieldName_Max Then
                Throw New SystemException(FuncName + vbCrLf + "Invalid length: " + Value.Length.ToString)
            End If
            If Value.IndexOf(vbLf) >= 0 Then
                Throw New SystemException(FuncName + vbCrLf + "Not a multiline property")
            End If
        End If
        CheckValueMore_FieldName(Value)
    End Sub

    Protected Shared Sub Validate_FieldName(ByVal Obj As IDRIS_DataFormat)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Re-check value before saving ---
        Obj.CheckValue_FieldName(Obj.FieldName)
        ' --- Allow only valid business logic and database values ---
        If Obj.FieldName Is Nothing Then
            Throw New ArgumentNullException(FuncName)
        End If
        ValidateMore_FieldName(Obj)
    End Sub

    ' --- Partial routines that can be completed in a partial class ---
    Partial Private Sub FixDefault_FieldName()
    End Sub
    Partial Private Sub FixValue_FieldName(ByRef Value As String)
    End Sub
    Partial Private Sub CheckValueMore_FieldName(ByVal Value As String)
    End Sub
    Partial Private Shared Sub ValidateMore_FieldName(ByVal Obj As IDRIS_DataFormat)
    End Sub

#End Region

#Region " Property CadolType (String 2 NotNull) "

    Protected _CadolType_Default As String = ""
    Protected _CadolType As String = _CadolType_Default
    Protected _CadolType_Max As Integer = 2

    Public Property CadolType() As String
        Get
            FixDefault_CadolType()
            Return _CadolType
        End Get
        Set(ByVal value As String)
            FixDefault_CadolType()
            FixValue_CadolType(value)
            CheckValue_CadolType(value)
            If _CadolType <> value Then
                _CadolType = value
                If IsLocal AndAlso Not IsFillingFields Then IsChanged = True
            End If
        End Set
    End Property

    Private Sub CheckValue_CadolType(ByVal Value As String)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Default must be valid ---
        If Value = _CadolType_Default Then Exit Sub
        ' --- Allow only valid values ---
        If Value IsNot Nothing Then
            If Value.Length > _CadolType_Max Then
                Throw New SystemException(FuncName + vbCrLf + "Invalid length: " + Value.Length.ToString)
            End If
            If Value.IndexOf(vbLf) >= 0 Then
                Throw New SystemException(FuncName + vbCrLf + "Not a multiline property")
            End If
        End If
        CheckValueMore_CadolType(Value)
    End Sub

    Protected Shared Sub Validate_CadolType(ByVal Obj As IDRIS_DataFormat)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Re-check value before saving ---
        Obj.CheckValue_CadolType(Obj.CadolType)
        ' --- Allow only valid business logic and database values ---
        If Obj.CadolType Is Nothing Then
            Throw New ArgumentNullException(FuncName)
        End If
        ValidateMore_CadolType(Obj)
    End Sub

    ' --- Partial routines that can be completed in a partial class ---
    Partial Private Sub FixDefault_CadolType()
    End Sub
    Partial Private Sub FixValue_CadolType(ByRef Value As String)
    End Sub
    Partial Private Sub CheckValueMore_CadolType(ByVal Value As String)
    End Sub
    Partial Private Shared Sub ValidateMore_CadolType(ByVal Obj As IDRIS_DataFormat)
    End Sub

#End Region

#Region " Property CadolLength (Int NotNull) "

    Protected _CadolLength_Default As Integer = 0
    Protected _CadolLength As Integer = _CadolLength_Default

    Public Property CadolLength() As Integer
        Get
            FixDefault_CadolLength()
            Return _CadolLength
        End Get
        Set(ByVal value As Integer)
            FixDefault_CadolLength()
            FixValue_CadolLength(value)
            CheckValue_CadolLength(value)
            If _CadolLength <> value Then
                _CadolLength = value
                If IsLocal AndAlso Not IsFillingFields Then IsChanged = True
            End If
        End Set
    End Property

    Private Sub CheckValue_CadolLength(ByVal Value As Integer)
        ' --- Allow only valid values ---
        CheckValueMore_CadolLength(Value)
    End Sub

    Protected Shared Sub Validate_CadolLength(ByVal Obj As IDRIS_DataFormat)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Re-check value before saving ---
        Obj.CheckValue_CadolLength(Obj.CadolLength)
        ' --- Allow only valid business logic and database values ---
        ValidateMore_CadolLength(Obj)
    End Sub

    ' --- Partial routines that can be completed in a partial class ---
    Partial Private Sub FixDefault_CadolLength()
    End Sub
    Partial Private Sub FixValue_CadolLength(ByRef Value As Integer)
    End Sub
    Partial Private Sub CheckValueMore_CadolLength(ByVal Value As Integer)
    End Sub
    Partial Private Shared Sub ValidateMore_CadolLength(ByVal Obj As IDRIS_DataFormat)
    End Sub

#End Region

#Region " Property CadolScale (Int Null) "

    Protected _CadolScale_Default As Nullable(Of Integer) = Nothing
    Protected _CadolScale As Nullable(Of Integer) = _CadolScale_Default

    Public Property CadolScale() As Nullable(Of Integer)
        Get
            FixDefault_CadolScale()
            Return _CadolScale
        End Get
        Set(ByVal value As Nullable(Of Integer))
            FixDefault_CadolScale()
            FixValue_CadolScale(value)
            CheckValue_CadolScale(value)
            If (_CadolScale.HasValue <> value.HasValue) OrElse _
               (_CadolScale.HasValue AndAlso _CadolScale.Value <> value.Value) Then
                _CadolScale = value
                If IsLocal AndAlso Not IsFillingFields Then IsChanged = True
            End If
        End Set
    End Property

    Private Sub CheckValue_CadolScale(ByVal Value As Nullable(Of Integer))
        ' --- Allow only valid values ---
        CheckValueMore_CadolScale(Value)
    End Sub

    Protected Shared Sub Validate_CadolScale(ByVal Obj As IDRIS_DataFormat)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Re-check value before saving ---
        Obj.CheckValue_CadolScale(Obj.CadolScale)
        ' --- Allow only valid business logic and database values ---
        ValidateMore_CadolScale(Obj)
    End Sub

    ' --- Partial routines that can be completed in a partial class ---
    Partial Private Sub FixDefault_CadolScale()
    End Sub
    Partial Private Sub FixValue_CadolScale(ByRef Value As Nullable(Of Integer))
    End Sub
    Partial Private Sub CheckValueMore_CadolScale(ByVal Value As Nullable(Of Integer))
    End Sub
    Partial Private Shared Sub ValidateMore_CadolScale(ByVal Obj As IDRIS_DataFormat)
    End Sub

#End Region

#Region " Property CadolValue (Int Null) "

    Protected _CadolValue_Default As Nullable(Of Integer) = Nothing
    Protected _CadolValue As Nullable(Of Integer) = _CadolValue_Default

    Public Property CadolValue() As Nullable(Of Integer)
        Get
            FixDefault_CadolValue()
            Return _CadolValue
        End Get
        Set(ByVal value As Nullable(Of Integer))
            FixDefault_CadolValue()
            FixValue_CadolValue(value)
            CheckValue_CadolValue(value)
            If (_CadolValue.HasValue <> value.HasValue) OrElse _
               (_CadolValue.HasValue AndAlso _CadolValue.Value <> value.Value) Then
                _CadolValue = value
                If IsLocal AndAlso Not IsFillingFields Then IsChanged = True
            End If
        End Set
    End Property

    Private Sub CheckValue_CadolValue(ByVal Value As Nullable(Of Integer))
        ' --- Allow only valid values ---
        CheckValueMore_CadolValue(Value)
    End Sub

    Protected Shared Sub Validate_CadolValue(ByVal Obj As IDRIS_DataFormat)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Re-check value before saving ---
        Obj.CheckValue_CadolValue(Obj.CadolValue)
        ' --- Allow only valid business logic and database values ---
        ValidateMore_CadolValue(Obj)
    End Sub

    ' --- Partial routines that can be completed in a partial class ---
    Partial Private Sub FixDefault_CadolValue()
    End Sub
    Partial Private Sub FixValue_CadolValue(ByRef Value As Nullable(Of Integer))
    End Sub
    Partial Private Sub CheckValueMore_CadolValue(ByVal Value As Nullable(Of Integer))
    End Sub
    Partial Private Shared Sub ValidateMore_CadolValue(ByVal Obj As IDRIS_DataFormat)
    End Sub

#End Region

#Region " Property Location (String 256 Null) "

    Protected _Location_Default As String = Nothing
    Protected _Location As String = _Location_Default
    Protected _Location_Max As Integer = 256

    Public Property Location() As String
        Get
            FixDefault_Location()
            Return _Location
        End Get
        Set(ByVal value As String)
            FixDefault_Location()
            FixValue_Location(value)
            CheckValue_Location(value)
            If (_Location Is Nothing) <> (value Is Nothing) OrElse _Location <> value Then
                _Location = value
                If IsLocal AndAlso Not IsFillingFields Then IsChanged = True
            End If
        End Set
    End Property

    Private Sub CheckValue_Location(ByVal Value As String)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Default must be valid ---
        If Value = _Location_Default Then Exit Sub
        ' --- Allow only valid values ---
        If Value IsNot Nothing Then
            If Value.Length > _Location_Max Then
                Throw New SystemException(FuncName + vbCrLf + "Invalid length: " + Value.Length.ToString)
            End If
        End If
        CheckValueMore_Location(Value)
    End Sub

    Protected Shared Sub Validate_Location(ByVal Obj As IDRIS_DataFormat)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Re-check value before saving ---
        Obj.CheckValue_Location(Obj.Location)
        ' --- Allow only valid business logic and database values ---
        ValidateMore_Location(Obj)
    End Sub

    ' --- Partial routines that can be completed in a partial class ---
    Partial Private Sub FixDefault_Location()
    End Sub
    Partial Private Sub FixValue_Location(ByRef Value As String)
    End Sub
    Partial Private Sub CheckValueMore_Location(ByVal Value As String)
    End Sub
    Partial Private Shared Sub ValidateMore_Location(ByVal Obj As IDRIS_DataFormat)
    End Sub

#End Region

#Region " Get Routines "

    Public Shared Function GetByID(ByVal ID As Integer) As IDRIS_DataFormat
        Return IDRIS_DataFormat.GetBySQL(BaseQuery + FirstConj + " [ID] = " + ID.ToString)
    End Function

    Public Shared Function GetBySQL(ByVal SQLClause As String) As IDRIS_DataFormat
        Dim Result As IDRIS_DataFormat = Nothing
        Dim dc As New Arena_DataConn.DataConnection
        Try
            Using cnIDRIS As New SqlClient.SqlConnection(dc.ConnectionString_IDRIS)
                cnIDRIS.Open()
                Using cmd As New SqlCommand(SQLClause, cnIDRIS)
                    cmd.CommandType = CommandType.Text
                    cmd.CommandTimeout = DataConnection.SQLTimeoutSeconds
                    Dim dr As SqlDataReader = cmd.ExecuteReader(CommandBehavior.SingleRow)
                    If dr.Read Then
                        Result = New IDRIS_DataFormat
                        IDRIS_DataFormat.FillFields(Result, dr)
                    End If
                    dr.Close()
                End Using
            End Using
        Catch ex As Exception
            Throw ' re-throw the exception
        End Try
        Return Result
    End Function

    Public Shared Function GetAll() As List(Of IDRIS_DataFormat)
        Return IDRIS_DataFormat.GetAllBySQL(BaseQuery + " ORDER BY [ID]")
    End Function

    Public Shared Function GetAllBySQL(ByVal SQLClause As String) As List(Of IDRIS_DataFormat)
        Dim TempIDRIS_DataFormat As IDRIS_DataFormat
        Dim Result As New List(Of IDRIS_DataFormat)
        Dim dc As New Arena_DataConn.DataConnection
        Try
            Using cnIDRIS As New SqlClient.SqlConnection(dc.ConnectionString_IDRIS)
                cnIDRIS.Open()
                Using cmd As New SqlCommand(SQLClause, cnIDRIS)
                    cmd.CommandType = CommandType.Text
                    cmd.CommandTimeout = DataConnection.SQLTimeoutSeconds
                    Dim dr As SqlDataReader = cmd.ExecuteReader(CommandBehavior.SingleResult)
                    Do While dr.Read
                        TempIDRIS_DataFormat = New IDRIS_DataFormat
                        IDRIS_DataFormat.FillFields(TempIDRIS_DataFormat, dr)
                        Result.Add(TempIDRIS_DataFormat)
                    Loop
                    dr.Close()
                End Using
            End Using
        Catch ex As Exception
            Throw ' re-throw the exception
        End Try
        Return Result
    End Function

#End Region

#Region " Internal Routines "

    Friend Overloads Shared Sub FillFields(ByVal Obj As IDRIS_DataFormat, ByVal dr As SqlDataReader)
        If Obj Is Nothing Then Exit Sub
        If dr Is Nothing Then Exit Sub
        ' --- Prevent IsChanged = True while filling fields ---
        Obj.IsFillingFields = True
        ' --- ID ---
        Static _FieldNum_ID As Integer = -99 ' not set yet
        If _FieldNum_ID = -99 Then
            Try
                _FieldNum_ID = dr.GetOrdinal("ID")
            Catch ex As Exception
                _FieldNum_ID = -1 ' not found
            End Try
        End If
        If _FieldNum_ID >= 0 Then
            Obj.ID = dr.GetInt32(_FieldNum_ID)
        End If
        ' --- TableName ---
        Static _FieldNum_TableName As Integer = -99 ' not set yet
        If _FieldNum_TableName = -99 Then
            Try
                _FieldNum_TableName = dr.GetOrdinal("TableName")
            Catch ex As Exception
                _FieldNum_TableName = -1 ' not found
            End Try
        End If
        If _FieldNum_TableName >= 0 Then
            Obj.TableName = dr.GetString(_FieldNum_TableName)
        End If
        ' --- FieldNumber ---
        Static _FieldNum_FieldNumber As Integer = -99 ' not set yet
        If _FieldNum_FieldNumber = -99 Then
            Try
                _FieldNum_FieldNumber = dr.GetOrdinal("FieldNumber")
            Catch ex As Exception
                _FieldNum_FieldNumber = -1 ' not found
            End Try
        End If
        If _FieldNum_FieldNumber >= 0 Then
            Obj.FieldNumber = dr.GetInt16(_FieldNum_FieldNumber)
        End If
        ' --- FieldName ---
        Static _FieldNum_FieldName As Integer = -99 ' not set yet
        If _FieldNum_FieldName = -99 Then
            Try
                _FieldNum_FieldName = dr.GetOrdinal("FieldName")
            Catch ex As Exception
                _FieldNum_FieldName = -1 ' not found
            End Try
        End If
        If _FieldNum_FieldName >= 0 Then
            Obj.FieldName = dr.GetString(_FieldNum_FieldName)
        End If
        ' --- CadolType ---
        Static _FieldNum_CadolType As Integer = -99 ' not set yet
        If _FieldNum_CadolType = -99 Then
            Try
                _FieldNum_CadolType = dr.GetOrdinal("CadolType")
            Catch ex As Exception
                _FieldNum_CadolType = -1 ' not found
            End Try
        End If
        If _FieldNum_CadolType >= 0 Then
            Obj.CadolType = dr.GetString(_FieldNum_CadolType)
        End If
        ' --- CadolLength ---
        Static _FieldNum_CadolLength As Integer = -99 ' not set yet
        If _FieldNum_CadolLength = -99 Then
            Try
                _FieldNum_CadolLength = dr.GetOrdinal("CadolLength")
            Catch ex As Exception
                _FieldNum_CadolLength = -1 ' not found
            End Try
        End If
        If _FieldNum_CadolLength >= 0 Then
            Obj.CadolLength = dr.GetInt16(_FieldNum_CadolLength)
        End If
        ' --- CadolScale ---
        Static _FieldNum_CadolScale As Integer = -99 ' not set yet
        If _FieldNum_CadolScale = -99 Then
            Try
                _FieldNum_CadolScale = dr.GetOrdinal("CadolScale")
            Catch ex As Exception
                _FieldNum_CadolScale = -1 ' not found
            End Try
        End If
        If _FieldNum_CadolScale < 0 OrElse dr.IsDBNull(_FieldNum_CadolScale) Then
            Obj.CadolScale = Nothing
        Else
            Obj.CadolScale = dr.GetByte(_FieldNum_CadolScale)
        End If
        ' --- CadolValue ---
        Static _FieldNum_CadolValue As Integer = -99 ' not set yet
        If _FieldNum_CadolValue = -99 Then
            Try
                _FieldNum_CadolValue = dr.GetOrdinal("CadolValue")
            Catch ex As Exception
                _FieldNum_CadolValue = -1 ' not found
            End Try
        End If
        If _FieldNum_CadolValue < 0 OrElse dr.IsDBNull(_FieldNum_CadolValue) Then
            Obj.CadolValue = Nothing
        Else
            Obj.CadolValue = dr.GetInt32(_FieldNum_CadolValue)
        End If
        ' --- Location ---
        Static _FieldNum_Location As Integer = -99 ' not set yet
        If _FieldNum_Location = -99 Then
            Try
                _FieldNum_Location = dr.GetOrdinal("Location")
            Catch ex As Exception
                _FieldNum_Location = -1 ' not found
            End Try
        End If
        If _FieldNum_Location < 0 OrElse dr.IsDBNull(_FieldNum_Location) Then
            Obj.Location = Nothing
        Else
            Obj.Location = dr.GetString(_FieldNum_Location)
        End If
        ' --- Internal Flags ---
        Obj.IsNew = False
        Obj.IsDeleted = False
        Obj.IsChanged = False
        ' --- only local objects use FillFields to populate properties ---
        Obj.IsLocal = True
        ' --- Done filling fields ---
        Obj.IsFillingFields = False
    End Sub

    Protected Overloads Shared Sub Validate(ByVal Obj As IDRIS_DataFormat)
        If Obj Is Nothing Then Exit Sub
        IDRIS_DataFormat.Validate_TableName(Obj)
        IDRIS_DataFormat.Validate_FieldNumber(Obj)
        IDRIS_DataFormat.Validate_FieldName(Obj)
        IDRIS_DataFormat.Validate_CadolType(Obj)
        IDRIS_DataFormat.Validate_CadolLength(Obj)
        IDRIS_DataFormat.Validate_CadolScale(Obj)
        IDRIS_DataFormat.Validate_CadolValue(Obj)
        IDRIS_DataFormat.Validate_Location(Obj)
    End Sub

    Protected Overloads Sub FieldList(ByVal sb As StringBuilder)
        ' --- used in the list of fields in an INSERT INTO command ---
        With sb
            .Append("[TableName]")
            .Append(",") : .Append("[FieldNumber]")
            .Append(",") : .Append("[FieldName]")
            .Append(",") : .Append("[CadolType]")
            .Append(",") : .Append("[CadolLength]")
            .Append(",") : .Append("[CadolScale]")
            .Append(",") : .Append("[CadolValue]")
            .Append(",") : .Append("[Location]")
        End With
    End Sub

    Protected Overloads Sub ValueList(ByVal sb As StringBuilder)
        ' --- used in the list of values in an INSERT INTO command ---
        With sb
            .Append("'") : .Append(StringToSQL(Me.TableName)) : .Append("'")
            .Append(",") : .Append(Me.FieldNumber.ToString)
            .Append(",") : .Append("'") : .Append(StringToSQL(Me.FieldName)) : .Append("'")
            .Append(",") : .Append("'") : .Append(StringToSQL(Me.CadolType)) : .Append("'")
            .Append(",") : .Append(Me.CadolLength.ToString)
            If Me.CadolScale.HasValue Then
                .Append(",") : .Append(Me.CadolScale.Value.ToString)
            Else
                .Append(",") : .Append("NULL")
            End If
            If Me.CadolValue.HasValue Then
                .Append(",") : .Append(Me.CadolValue.Value.ToString)
            Else
                .Append(",") : .Append("NULL")
            End If
            If Me.Location IsNot Nothing Then
                .Append(",") : .Append("'") : .Append(StringToSQL(Me.Location)) : .Append("'")
            Else
                .Append(",") : .Append("NULL")
            End If
        End With
    End Sub

    Protected Overloads Sub UpdateList(ByVal sb As StringBuilder)
        ' --- used in the SET section of an UPDATE command ---
        With sb
            .Append("[TableName] = '") : .Append(StringToSQL(Me.TableName)) : .Append("'")
            .Append(",") : .Append("[FieldNumber] = ") : .Append(Me.FieldNumber.ToString)
            .Append(",") : .Append("[FieldName] = '") : .Append(StringToSQL(Me.FieldName)) : .Append("'")
            .Append(",") : .Append("[CadolType] = '") : .Append(StringToSQL(Me.CadolType)) : .Append("'")
            .Append(",") : .Append("[CadolLength] = ") : .Append(Me.CadolLength.ToString)
            .Append(",") : .Append("[CadolScale] = ")
            If Me.CadolScale.HasValue Then
                .Append(Me.CadolScale.Value.ToString)
            Else
                .Append("NULL")
            End If
            .Append(",") : .Append("[CadolValue] = ")
            If Me.CadolValue.HasValue Then
                .Append(Me.CadolValue.Value.ToString)
            Else
                .Append("NULL")
            End If
            .Append(",") : .Append("[Location] = ")
            If Me.Location IsNot Nothing Then
                .Append("'") : .Append(StringToSQL(Me.Location)) : .Append("'")
            Else
                .Append("NULL")
            End If
        End With
    End Sub

#End Region

#Region " Save Routine "

    Public Sub Save()
        Dim dc As New DataConnection
        IDRIS_DataFormat.Save(Me, dc)
    End Sub

    Public Sub Save(ByVal dc As DataConnection)
        IDRIS_DataFormat.Save(Me, dc)
    End Sub

    Public Shared Sub Save(ByVal Obj As IDRIS_DataFormat, ByVal dc As DataConnection)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        Dim sb As New StringBuilder
        Dim cnIDRIS As SqlConnection
        ' --------------------------
        If Obj Is Nothing Then Exit Sub
        If dc Is Nothing Then Exit Sub
        ' --- delete record ---
        If Obj.IsDeleted Then
            IDRIS_DataFormat.Delete(Obj, dc)
            Exit Sub
        End If
        Try
            ' --- fix record before saving if necessary ---
            FixRecordPreSave(Obj, dc)
            ' --- validate before saving ---
            IDRIS_DataFormat.Validate(Obj)
            ValidateRecordLevel(Obj)
            ' --- add new record ---
            If Obj.IsNew OrElse Obj.ID.GetValueOrDefault <= 0 Then
                cnIDRIS = dc.GetConnection_IDRIS
                Using cmd As SqlCommand = cnIDRIS.CreateCommand
                    cmd.Transaction = dc.GetTransaction_IDRIS
                    With sb
                        .Append("INSERT INTO ")
                        .Append(SQLTableName)
                        .Append(" (")
                        Obj.FieldList(sb)
                        .Append(") VALUES (")
                        Obj.ValueList(sb)
                        .Append(") ; ")
                        ' --- Return the new record ---
                        .Append(BaseQuery)
                        .Append(FirstConj)
                        .Append(" [ID] = SCOPE_IDENTITY()")
                    End With
                    cmd.CommandText = sb.ToString
                    cmd.CommandType = CommandType.Text
                    cmd.CommandTimeout = DataConnection.SQLTimeoutSeconds
                    Dim dr As SqlDataReader = cmd.ExecuteReader(CommandBehavior.SingleRow)
                    If dr.Read Then
                        IDRIS_DataFormat.FillFields(Obj, dr)
                    Else
                        dc.Rollback()
                        Throw New SystemException("Record unexpectedly missing.")
                    End If
                    dr.Close()
                    dc.CloseConnection(cnIDRIS)
                End Using
                Obj.IsChanged = False
            End If
            ' --- update changed record ---
            If Obj.IsChanged Then
                cnIDRIS = dc.GetConnection_IDRIS
                Using cmd As SqlCommand = cnIDRIS.CreateCommand
                    cmd.Transaction = dc.GetTransaction_IDRIS
                    With sb
                        .Append("UPDATE ")
                        .Append(SQLTableName)
                        .Append(" SET ")
                        Obj.UpdateList(sb)
                        .Append(" WHERE [ID] = ") : .Append(Obj.ID.Value.ToString)
                    End With
                    cmd.CommandText = sb.ToString
                    cmd.CommandType = CommandType.Text
                    cmd.CommandTimeout = DataConnection.SQLTimeoutSeconds
                    Dim RowsChanged As Integer = cmd.ExecuteNonQuery
                    If RowsChanged < 1 Then
                        dc.Rollback()
                        Throw New SystemException("Record unexpectedly missing or changed.")
                    End If
                    ' --- reload record to get updated values (such as RowVersion) ---
                    cmd.CommandText = BaseQuery + FirstConj + " [ID] = " + Obj.ID.Value.ToString
                    cmd.CommandType = CommandType.Text
                    cmd.CommandTimeout = DataConnection.SQLTimeoutSeconds
                    Dim dr As SqlDataReader = cmd.ExecuteReader(CommandBehavior.SingleRow)
                    If dr.Read Then
                        IDRIS_DataFormat.FillFields(Obj, dr)
                    Else
                        dc.Rollback()
                        Throw New SystemException("Record unexpectedly missing.")
                    End If
                    dr.Close()
                    dc.CloseConnection(cnIDRIS)
                End Using
                Obj.IsChanged = False
            End If
            ' --- fix record after saving if necessary ---
            FixRecordPostSave(Obj, dc)
        Catch ex As Exception
            dc.Rollback()
            Throw New SystemException(FuncName + vbCrLf + "Error saving record." + vbCrLf + ex.Message)
        End Try
    End Sub

    Partial Private Shared Sub FixRecordPreSave(ByVal Obj As IDRIS_DataFormat, ByVal dc As DataConnection)
    End Sub
    Partial Private Shared Sub ValidateRecordLevel(ByVal Obj As IDRIS_DataFormat)
    End Sub
    Partial Private Shared Sub FixRecordPostSave(ByVal Obj As IDRIS_DataFormat, ByVal dc As DataConnection)
    End Sub

#End Region

#Region " Delete Routine "

    Public Sub Delete()
        Dim dc As New DataConnection
        IDRIS_DataFormat.Delete(Me, dc)
    End Sub

    Public Sub Delete(ByVal dc As DataConnection)
        IDRIS_DataFormat.Delete(Me, dc)
    End Sub

    Public Shared Sub Delete(ByRef Obj As IDRIS_DataFormat, ByVal dc As DataConnection)
        Dim cnIDRIS As SqlConnection
        ' --------------------------
        If Obj Is Nothing Then Exit Sub
        If dc Is Nothing Then Exit Sub
        ' --- Validate if record may be safely deleted ---
        ValidatePreDelete(Obj, dc)
        ' --- Release any resources before deleting if necessary ---
        ReleaseResourcesPreDelete(Obj, dc)
        ' --- Delete current record ---
        If Obj.ID.HasValue AndAlso Obj.ID.Value > 0 Then
            Try
                cnIDRIS = dc.GetConnection_IDRIS
                Using cmd As SqlCommand = cnIDRIS.CreateCommand
                    cmd.Transaction = dc.GetTransaction_IDRIS
                    cmd.CommandText = DeleteQuery + " WHERE [ID] = " + Obj.ID.Value.ToString
                    cmd.CommandType = CommandType.Text
                    cmd.CommandTimeout = DataConnection.SQLTimeoutSeconds
                    cmd.ExecuteNonQuery()
                End Using
                dc.CloseConnection(cnIDRIS)
            Catch ex As Exception
                dc.Rollback()
                Throw ' re-throw the exception
            End Try
        End If
        ' --- Release any resources after deleting if necessary ---
        ReleaseResourcesPostDelete(Obj, dc)
        ' --- Done ---
        Obj.ID = Nothing
        Obj.IsDeleted = True
        Obj.IsNew = False
        Obj.IsChanged = False
    End Sub

    Partial Private Shared Sub ValidatePreDelete(ByVal Obj As IDRIS_DataFormat, ByVal dc As DataConnection)
    End Sub
    Partial Private Shared Sub ReleaseResourcesPreDelete(ByVal Obj As IDRIS_DataFormat, ByVal dc As DataConnection)
    End Sub
    Partial Private Shared Sub ReleaseResourcesPostDelete(ByVal Obj As IDRIS_DataFormat, ByVal dc As DataConnection)
    End Sub

#End Region

End Class

Public Class IDRIS_DataFormat_Reader

    Implements IDisposable

#Region " Reader Routines "

    Private dc As Arena_DataConn.DataConnection
    Private cnIDRIS As SqlClient.SqlConnection
    Private cmd As SqlCommand
    Private dr As SqlDataReader

    Public Sub New(ByVal SQLClause As String)
        dc = New Arena_DataConn.DataConnection
        cnIDRIS = New SqlClient.SqlConnection(dc.ConnectionString_IDRIS)
        cnIDRIS.Open()
        cmd = New SqlCommand(SQLClause, cnIDRIS)
        cmd.CommandType = CommandType.Text
        cmd.CommandTimeout = DataConnection.SQLTimeoutSeconds
        dr = cmd.ExecuteReader(CommandBehavior.SingleResult)
    End Sub

    Public Function ReadNext() As IDRIS_DataFormat
        If dr.Read Then
            Dim TempIDRIS_DataFormat As New IDRIS_DataFormat
            IDRIS_DataFormat.FillFields(TempIDRIS_DataFormat, dr)
            Return TempIDRIS_DataFormat
        End If
        Return Nothing
    End Function

#End Region

#Region " IDisposable Support "

    Private disposedValue As Boolean

    Protected Overridable Sub Dispose(disposing As Boolean)
        If Not Me.disposedValue Then
            If disposing Then
                If cmd IsNot Nothing Then
                    cmd.Cancel()
                    cmd.Dispose()
                End If
                If dr IsNot Nothing Then dr.Close()
                If cnIDRIS IsNot Nothing Then cnIDRIS.Close()
                If dc IsNot Nothing Then dc.Dispose()
            End If
        End If
        Me.disposedValue = True
    End Sub

    Public Sub Dispose() Implements IDisposable.Dispose
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub

#End Region

End Class
