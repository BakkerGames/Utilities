' $---$
' --- $Database$.$ClassName$ ---
' $---$

' --- This file is automatically generated. Please don't change! ---

Imports System.Data.SqlClient
Imports System.Text
Imports Arena_DataConn
Imports Arena_Utilities.StringUtils
Imports IDRIS_BaseLib

Public Class $ClassName$

    Inherits BaseClass

#Region " Constants "

    Private Shared ReadOnly ObjName As String = System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName

    Private Shared _SQLTableName As String = "[$TableName$]"
    Private Shared _BaseQuery As String = $BaseQuery$
    Private Shared _FirstConj As String = $FirstConj$
    Private Shared _DeleteQuery As String = $DeleteQuery$

    Public Shared ReadOnly Property SQLTableName() As String
        Get
            FixSQLTablename()
            Return _SQLTableName
        End Get
    End Property
    Partial Private Shared Sub FixSQLTablename()
    End Sub

    Public Shared ReadOnly Property BaseQuery() As String
        Get
            FixBaseQuery()
            Return _BaseQuery
        End Get
    End Property
    Partial Private Shared Sub FixBaseQuery()
    End Sub

    Public Shared ReadOnly Property FirstConj() As String
        Get
            FixFirstConj()
            Return _FirstConj
        End Get
    End Property
    Partial Private Shared Sub FixFirstConj()
    End Sub

    Public Shared ReadOnly Property DeleteQuery() As String
        Get
            FixDeleteQuery()
            Return _DeleteQuery
        End Get
    End Property
    Partial Private Shared Sub FixDeleteQuery()
    End Sub

#End Region

$Properties$

#Region " Get Routines "

    Public Shared Function GetAll() As List(Of $ClassName$)
        Return $ClassName$.GetAllBySQL(BaseQuery + " ORDER BY [LastChanged]")
    End Function

    Public Shared Function GetAllByKey(ByVal Key As String) As List(Of $ClassName$)
        Return $ClassName$.GetAllBySQL(BaseQuery +
$Class_Spc$                            FirstConj + " [KEY] = '" + StringToSQL(Key) + "'" +
$Class_Spc$                            " ORDER BY [LastChanged]")
    End Function

    Public Shared Function GetAllByKeyVolume(ByVal Key As String, ByVal Volume As String) As List(Of $ClassName$)
        Return $ClassName$.GetAllBySQL(BaseQuery +
$Class_Spc$                            FirstConj + " [KEY] = '" + StringToSQL(Key) + "'" +
$Class_Spc$                            " AND [VOLUME] = '" + StringToSQL(Volume) + "'" +
$Class_Spc$                            " ORDER BY [LastChanged]")
    End Function

    Public Shared Function GetAllBySQL(ByVal SQLClause As String) As List(Of $ClassName$)
        Dim Temp$ClassName$ As $ClassName$
        Dim Result As New List(Of $ClassName$)
        Dim dc As New Arena_DataConn.DataConnection
        Try
            Using cn$ConnName$ As New SqlClient.SqlConnection(dc.ConnectionString_$ConnName$)
                cn$ConnName$.Open()
                Using cmd As New SqlCommand(SQLClause, cn$ConnName$)
                    cmd.CommandType = CommandType.Text
                    cmd.CommandTimeout = DataConnection.SQLTimeoutSeconds
                    Dim dr As SqlDataReader = cmd.ExecuteReader(CommandBehavior.SingleResult)
                    Do While dr.Read
                        Temp$ClassName$ = New $ClassName$
                        $ClassName$.FillFields(Temp$ClassName$, dr)
                        Result.Add(Temp$ClassName$)
                    Loop
                    dr.Close()
                End Using
            End Using
        Catch ex As Exception
            Throw ' re-throw the exception
        End Try
        Return Result
    End Function

#End Region

#Region " Internal Routines "

    Friend Overloads Shared Sub FillFields(ByVal Obj As $ClassName$, ByVal dr As SqlDataReader)
        If Obj Is Nothing Then Exit Sub
        If dr Is Nothing Then Exit Sub
        ' --- Prevent IsChanged = True while filling fields ---
        Obj.IsFillingFields = True
$FillFields$
        BaseClass.FillFields(Obj, dr)
        ' --- Done filling fields ---
        Obj.IsFillingFields = False
    End Sub

#End Region

End Class

Public Class $ClassName$_Reader

    Implements IDisposable

#Region " Reader Routines "

    Private dc As Arena_DataConn.DataConnection
    Private cn$ConnName$ As SqlClient.SqlConnection
    Private cmd As SqlCommand
    Private dr As SqlDataReader

    Public Sub New(ByVal SQLClause As String)
        dc = New Arena_DataConn.DataConnection
        cn$ConnName$ = New SqlClient.SqlConnection(dc.ConnectionString_$ConnName$)
        cn$ConnName$.Open()
        cmd = New SqlCommand(SQLClause, cn$ConnName$)
        cmd.CommandType = CommandType.Text
        cmd.CommandTimeout = DataConnection.SQLTimeoutSeconds
        dr = cmd.ExecuteReader(CommandBehavior.SingleResult)
    End Sub

    Public Function ReadNext() As $ClassName$
        If dr.Read Then
            Dim Temp$ClassName$ As New $ClassName$
            $ClassName$.FillFields(Temp$ClassName$, dr)
            Return Temp$ClassName$
        End If
        Return Nothing
    End Function

#End Region

#Region " IDisposable Support "

    Private disposedValue As Boolean

    Protected Overridable Sub Dispose(disposing As Boolean)
        If Not Me.disposedValue Then
            If disposing Then
                If cmd IsNot Nothing Then
                    cmd.Cancel()
                    cmd.Dispose()
                End If
                If dr IsNot Nothing Then dr.Close()
                If cn$ConnName$ IsNot Nothing Then cn$ConnName$.Close()
                If dc IsNot Nothing Then dc.Dispose()
            End If
        End If
        Me.disposedValue = True
    End Sub

    Public Sub Dispose() Implements IDisposable.Dispose
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub

#End Region

End Class
