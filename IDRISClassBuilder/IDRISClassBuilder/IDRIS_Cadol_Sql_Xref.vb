' -----------------------------
' --- IDRIS.%Cadol_Sql_Xref ---
' -----------------------------

' --- This file is automatically generated. Please don't change! ---

Imports System.Text
Imports Arena_DataConn
Imports System.Data.SqlClient
Imports Arena_Utilities.StringUtils

Public Class IDRIS_Cadol_Sql_Xref

    ' --- This differentiates local objects from web service objects ---
    ' --- Assume all objects are Local at this point. ---
    Protected IsLocal As Boolean = True

    ' --- Turn this on when filling fields from the database ---
    Protected IsFillingFields As Boolean = False

#Region " Constants "

    Private Shared ReadOnly ObjName As String = System.Reflection.MethodBase.GetCurrentMethod().ReflectedType.FullName

    Private Shared _SQLTableName As String = "[%Cadol_Sql_Xref]"
    Private Shared _BaseQuery As String = "SELECT * FROM " + _SQLTableName
    Private Shared _FirstConj As String = " WHERE"
    Private Shared _DeleteQuery As String = "DELETE FROM " + _SQLTableName

    Public Shared ReadOnly Property SQLTableName() As String
        Get
            FixSQLTablename()
            Return _SQLTableName
        End Get
    End Property
    Partial Private Shared Sub FixSQLTablename()
    End Sub

    Public Shared ReadOnly Property BaseQuery() As String
        Get
            FixBaseQuery()
            Return _BaseQuery
        End Get
    End Property
    Partial Private Shared Sub FixBaseQuery()
    End Sub

    Public Shared ReadOnly Property FirstConj() As String
        Get
            FixFirstConj()
            Return _FirstConj
        End Get
    End Property
    Partial Private Shared Sub FixFirstConj()
    End Sub

    Public Shared ReadOnly Property DeleteQuery() As String
        Get
            FixDeleteQuery()
            Return _DeleteQuery
        End Get
    End Property
    Partial Private Shared Sub FixDeleteQuery()
    End Sub

#End Region

#Region " Property IsChanged (Boolean, Internal) "

    Private _IsChanged_Default As Boolean = False
    Private _IsChanged As Boolean = _IsChanged_Default

    Public Property IsChanged() As Boolean
        Get
            Return _IsChanged
        End Get
        Set(ByVal value As Boolean)
            If value Then
                _IsChanged = True
            Else
                _IsChanged = False
            End If
        End Set
    End Property

#End Region

#Region " Property IsNew (Boolean, Internal) "

    Private _IsNew_Default As Boolean = True
    Private _IsNew As Boolean = _IsNew_Default

    Public Property IsNew() As Boolean
        Get
            Return _IsNew
        End Get
        Set(ByVal value As Boolean)
            _IsNew = value
        End Set
    End Property

#End Region

#Region " Property IsDeleted (Boolean, Internal) "

    Private _IsDeleted_Default As Boolean = False
    Private _IsDeleted As Boolean = _IsDeleted_Default

    Public Property IsDeleted() As Boolean
        Get
            Return _IsDeleted
        End Get
        Set(ByVal value As Boolean)
            _IsDeleted = value
        End Set
    End Property

#End Region

#Region " Property ID (Int NotNull) "

    Protected _ID_Default As Nullable(Of Integer) = Nothing
    Protected _ID As Nullable(Of Integer) = _ID_Default
    Protected _ID_Min As Integer = 1

    Public Property ID() As Nullable(Of Integer)
        Get
            FixDefault_ID()
            Return _ID
        End Get
        Set(ByVal value As Nullable(Of Integer))
            FixDefault_ID()
            FixValue_ID(value)
            CheckValue_ID(value)
            If (_ID.HasValue <> value.HasValue) OrElse _
               (_ID.HasValue AndAlso _ID.Value <> value.Value) Then
                _ID = value
                If IsLocal AndAlso Not IsFillingFields Then IsChanged = True
            End If
        End Set
    End Property

    Private Sub CheckValue_ID(ByVal Value As Nullable(Of Integer))
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Allow only valid values ---
        If Value.HasValue Then
            If Value.Value < _ID_Min Then
                Throw New SystemException(FuncName + vbCrLf + "Value out of range: " + Value.Value.ToString)
            End If
        End If
        CheckValueMore_ID(Value)
    End Sub

    Protected Shared Sub Validate_ID(ByVal Obj As IDRIS_Cadol_Sql_Xref)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Re-check value before saving ---
        Obj.CheckValue_ID(Obj.ID)
        ' --- Allow only valid business logic and database values ---
        If Not Obj.ID.HasValue Then
            Throw New ArgumentNullException(FuncName)
        End If
        ValidateMore_ID(Obj)
    End Sub

    ' --- Partial routines that can be completed in a partial class ---
    Partial Private Sub FixDefault_ID()
    End Sub
    Partial Private Sub FixValue_ID(ByRef Value As Nullable(Of Integer))
    End Sub
    Partial Private Sub CheckValueMore_ID(ByVal Value As Nullable(Of Integer))
    End Sub
    Partial Private Shared Sub ValidateMore_ID(ByVal Obj As IDRIS_Cadol_Sql_Xref)
    End Sub

#End Region

#Region " Property DATFileName (String 8 NotNull) "

    Protected _DATFileName_Default As String = ""
    Protected _DATFileName As String = _DATFileName_Default
    Protected _DATFileName_Max As Integer = 8

    Public Property DATFileName() As String
        Get
            FixDefault_DATFileName()
            Return _DATFileName
        End Get
        Set(ByVal value As String)
            FixDefault_DATFileName()
            FixValue_DATFileName(value)
            CheckValue_DATFileName(value)
            If _DATFileName <> value Then
                _DATFileName = value
                If IsLocal AndAlso Not IsFillingFields Then IsChanged = True
            End If
        End Set
    End Property

    Private Sub CheckValue_DATFileName(ByVal Value As String)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Default must be valid ---
        If Value = _DATFileName_Default Then Exit Sub
        ' --- Allow only valid values ---
        If Value IsNot Nothing Then
            If Value.Length > _DATFileName_Max Then
                Throw New SystemException(FuncName + vbCrLf + "Invalid length: " + Value.Length.ToString)
            End If
            If Value.IndexOf(vbLf) >= 0 Then
                Throw New SystemException(FuncName + vbCrLf + "Not a multiline property")
            End If
        End If
        CheckValueMore_DATFileName(Value)
    End Sub

    Protected Shared Sub Validate_DATFileName(ByVal Obj As IDRIS_Cadol_Sql_Xref)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Re-check value before saving ---
        Obj.CheckValue_DATFileName(Obj.DATFileName)
        ' --- Allow only valid business logic and database values ---
        If Obj.DATFileName Is Nothing Then
            Throw New ArgumentNullException(FuncName)
        End If
        ValidateMore_DATFileName(Obj)
    End Sub

    ' --- Partial routines that can be completed in a partial class ---
    Partial Private Sub FixDefault_DATFileName()
    End Sub
    Partial Private Sub FixValue_DATFileName(ByRef Value As String)
    End Sub
    Partial Private Sub CheckValueMore_DATFileName(ByVal Value As String)
    End Sub
    Partial Private Shared Sub ValidateMore_DATFileName(ByVal Obj As IDRIS_Cadol_Sql_Xref)
    End Sub

#End Region

#Region " Property FormatFileName (String 20 NotNull) "

    Protected _FormatFileName_Default As String = ""
    Protected _FormatFileName As String = _FormatFileName_Default
    Protected _FormatFileName_Max As Integer = 20

    Public Property FormatFileName() As String
        Get
            FixDefault_FormatFileName()
            Return _FormatFileName
        End Get
        Set(ByVal value As String)
            FixDefault_FormatFileName()
            FixValue_FormatFileName(value)
            CheckValue_FormatFileName(value)
            If _FormatFileName <> value Then
                _FormatFileName = value
                If IsLocal AndAlso Not IsFillingFields Then IsChanged = True
            End If
        End Set
    End Property

    Private Sub CheckValue_FormatFileName(ByVal Value As String)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Default must be valid ---
        If Value = _FormatFileName_Default Then Exit Sub
        ' --- Allow only valid values ---
        If Value IsNot Nothing Then
            If Value.Length > _FormatFileName_Max Then
                Throw New SystemException(FuncName + vbCrLf + "Invalid length: " + Value.Length.ToString)
            End If
            If Value.IndexOf(vbLf) >= 0 Then
                Throw New SystemException(FuncName + vbCrLf + "Not a multiline property")
            End If
        End If
        CheckValueMore_FormatFileName(Value)
    End Sub

    Protected Shared Sub Validate_FormatFileName(ByVal Obj As IDRIS_Cadol_Sql_Xref)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Re-check value before saving ---
        Obj.CheckValue_FormatFileName(Obj.FormatFileName)
        ' --- Allow only valid business logic and database values ---
        If Obj.FormatFileName Is Nothing Then
            Throw New ArgumentNullException(FuncName)
        End If
        ValidateMore_FormatFileName(Obj)
    End Sub

    ' --- Partial routines that can be completed in a partial class ---
    Partial Private Sub FixDefault_FormatFileName()
    End Sub
    Partial Private Sub FixValue_FormatFileName(ByRef Value As String)
    End Sub
    Partial Private Sub CheckValueMore_FormatFileName(ByVal Value As String)
    End Sub
    Partial Private Shared Sub ValidateMore_FormatFileName(ByVal Obj As IDRIS_Cadol_Sql_Xref)
    End Sub

#End Region

#Region " Property SQLTableNameField (String 20 NotNull) "

    Protected _SQLTableNameField_Default As String = ""
    Protected _SQLTableNameField As String = _SQLTableNameField_Default
    Protected _SQLTableNameField_Max As Integer = 20

    Public Property SQLTableNameField() As String
        Get
            FixDefault_SQLTableNameField()
            Return _SQLTableNameField
        End Get
        Set(ByVal value As String)
            FixDefault_SQLTableNameField()
            FixValue_SQLTableNameField(value)
            CheckValue_SQLTableNameField(value)
            If _SQLTableNameField <> value Then
                _SQLTableNameField = value
                If IsLocal AndAlso Not IsFillingFields Then IsChanged = True
            End If
        End Set
    End Property

    Private Sub CheckValue_SQLTableNameField(ByVal Value As String)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Default must be valid ---
        If Value = _SQLTableNameField_Default Then Exit Sub
        ' --- Allow only valid values ---
        If Value IsNot Nothing Then
            If Value.Length > _SQLTableNameField_Max Then
                Throw New SystemException(FuncName + vbCrLf + "Invalid length: " + Value.Length.ToString)
            End If
            If Value.IndexOf(vbLf) >= 0 Then
                Throw New SystemException(FuncName + vbCrLf + "Not a multiline property")
            End If
        End If
        CheckValueMore_SQLTableNameField(Value)
    End Sub

    Protected Shared Sub Validate_SQLTableNameField(ByVal Obj As IDRIS_Cadol_Sql_Xref)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Re-check value before saving ---
        Obj.CheckValue_SQLTableNameField(Obj.SQLTableNameField)
        ' --- Allow only valid business logic and database values ---
        If Obj.SQLTableNameField Is Nothing Then
            Throw New ArgumentNullException(FuncName)
        End If
        ValidateMore_SQLTableNameField(Obj)
    End Sub

    ' --- Partial routines that can be completed in a partial class ---
    Partial Private Sub FixDefault_SQLTableNameField()
    End Sub
    Partial Private Sub FixValue_SQLTableNameField(ByRef Value As String)
    End Sub
    Partial Private Sub CheckValueMore_SQLTableNameField(ByVal Value As String)
    End Sub
    Partial Private Shared Sub ValidateMore_SQLTableNameField(ByVal Obj As IDRIS_Cadol_Sql_Xref)
    End Sub

#End Region

#Region " Property CadolKey (String 20 Null) "

    Protected _CadolKey_Default As String = Nothing
    Protected _CadolKey As String = _CadolKey_Default
    Protected _CadolKey_Max As Integer = 20

    Public Property CadolKey() As String
        Get
            FixDefault_CadolKey()
            Return _CadolKey
        End Get
        Set(ByVal value As String)
            FixDefault_CadolKey()
            FixValue_CadolKey(value)
            CheckValue_CadolKey(value)
            If (_CadolKey Is Nothing) <> (value Is Nothing) OrElse _CadolKey <> value Then
                _CadolKey = value
                If IsLocal AndAlso Not IsFillingFields Then IsChanged = True
            End If
        End Set
    End Property

    Private Sub CheckValue_CadolKey(ByVal Value As String)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Default must be valid ---
        If Value = _CadolKey_Default Then Exit Sub
        ' --- Allow only valid values ---
        If Value IsNot Nothing Then
            If Value.Length > _CadolKey_Max Then
                Throw New SystemException(FuncName + vbCrLf + "Invalid length: " + Value.Length.ToString)
            End If
            If Value.IndexOf(vbLf) >= 0 Then
                Throw New SystemException(FuncName + vbCrLf + "Not a multiline property")
            End If
        End If
        CheckValueMore_CadolKey(Value)
    End Sub

    Protected Shared Sub Validate_CadolKey(ByVal Obj As IDRIS_Cadol_Sql_Xref)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Re-check value before saving ---
        Obj.CheckValue_CadolKey(Obj.CadolKey)
        ' --- Allow only valid business logic and database values ---
        ValidateMore_CadolKey(Obj)
    End Sub

    ' --- Partial routines that can be completed in a partial class ---
    Partial Private Sub FixDefault_CadolKey()
    End Sub
    Partial Private Sub FixValue_CadolKey(ByRef Value As String)
    End Sub
    Partial Private Sub CheckValueMore_CadolKey(ByVal Value As String)
    End Sub
    Partial Private Shared Sub ValidateMore_CadolKey(ByVal Obj As IDRIS_Cadol_Sql_Xref)
    End Sub

#End Region

#Region " Property CadolByte (Int Null) "

    Protected _CadolByte_Default As Nullable(Of Integer) = Nothing
    Protected _CadolByte As Nullable(Of Integer) = _CadolByte_Default

    Public Property CadolByte() As Nullable(Of Integer)
        Get
            FixDefault_CadolByte()
            Return _CadolByte
        End Get
        Set(ByVal value As Nullable(Of Integer))
            FixDefault_CadolByte()
            FixValue_CadolByte(value)
            CheckValue_CadolByte(value)
            If (_CadolByte.HasValue <> value.HasValue) OrElse _
               (_CadolByte.HasValue AndAlso _CadolByte.Value <> value.Value) Then
                _CadolByte = value
                If IsLocal AndAlso Not IsFillingFields Then IsChanged = True
            End If
        End Set
    End Property

    Private Sub CheckValue_CadolByte(ByVal Value As Nullable(Of Integer))
        ' --- Allow only valid values ---
        CheckValueMore_CadolByte(Value)
    End Sub

    Protected Shared Sub Validate_CadolByte(ByVal Obj As IDRIS_Cadol_Sql_Xref)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Re-check value before saving ---
        Obj.CheckValue_CadolByte(Obj.CadolByte)
        ' --- Allow only valid business logic and database values ---
        ValidateMore_CadolByte(Obj)
    End Sub

    ' --- Partial routines that can be completed in a partial class ---
    Partial Private Sub FixDefault_CadolByte()
    End Sub
    Partial Private Sub FixValue_CadolByte(ByRef Value As Nullable(Of Integer))
    End Sub
    Partial Private Sub CheckValueMore_CadolByte(ByVal Value As Nullable(Of Integer))
    End Sub
    Partial Private Shared Sub ValidateMore_CadolByte(ByVal Obj As IDRIS_Cadol_Sql_Xref)
    End Sub

#End Region

#Region " Property CadolLength (Int Null) "

    Protected _CadolLength_Default As Nullable(Of Integer) = Nothing
    Protected _CadolLength As Nullable(Of Integer) = _CadolLength_Default

    Public Property CadolLength() As Nullable(Of Integer)
        Get
            FixDefault_CadolLength()
            Return _CadolLength
        End Get
        Set(ByVal value As Nullable(Of Integer))
            FixDefault_CadolLength()
            FixValue_CadolLength(value)
            CheckValue_CadolLength(value)
            If (_CadolLength.HasValue <> value.HasValue) OrElse _
               (_CadolLength.HasValue AndAlso _CadolLength.Value <> value.Value) Then
                _CadolLength = value
                If IsLocal AndAlso Not IsFillingFields Then IsChanged = True
            End If
        End Set
    End Property

    Private Sub CheckValue_CadolLength(ByVal Value As Nullable(Of Integer))
        ' --- Allow only valid values ---
        CheckValueMore_CadolLength(Value)
    End Sub

    Protected Shared Sub Validate_CadolLength(ByVal Obj As IDRIS_Cadol_Sql_Xref)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Re-check value before saving ---
        Obj.CheckValue_CadolLength(Obj.CadolLength)
        ' --- Allow only valid business logic and database values ---
        ValidateMore_CadolLength(Obj)
    End Sub

    ' --- Partial routines that can be completed in a partial class ---
    Partial Private Sub FixDefault_CadolLength()
    End Sub
    Partial Private Sub FixValue_CadolLength(ByRef Value As Nullable(Of Integer))
    End Sub
    Partial Private Sub CheckValueMore_CadolLength(ByVal Value As Nullable(Of Integer))
    End Sub
    Partial Private Shared Sub ValidateMore_CadolLength(ByVal Obj As IDRIS_Cadol_Sql_Xref)
    End Sub

#End Region

#Region " Property CadolValue (Int Null) "

    Protected _CadolValue_Default As Nullable(Of Integer) = Nothing
    Protected _CadolValue As Nullable(Of Integer) = _CadolValue_Default

    Public Property CadolValue() As Nullable(Of Integer)
        Get
            FixDefault_CadolValue()
            Return _CadolValue
        End Get
        Set(ByVal value As Nullable(Of Integer))
            FixDefault_CadolValue()
            FixValue_CadolValue(value)
            CheckValue_CadolValue(value)
            If (_CadolValue.HasValue <> value.HasValue) OrElse _
               (_CadolValue.HasValue AndAlso _CadolValue.Value <> value.Value) Then
                _CadolValue = value
                If IsLocal AndAlso Not IsFillingFields Then IsChanged = True
            End If
        End Set
    End Property

    Private Sub CheckValue_CadolValue(ByVal Value As Nullable(Of Integer))
        ' --- Allow only valid values ---
        CheckValueMore_CadolValue(Value)
    End Sub

    Protected Shared Sub Validate_CadolValue(ByVal Obj As IDRIS_Cadol_Sql_Xref)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Re-check value before saving ---
        Obj.CheckValue_CadolValue(Obj.CadolValue)
        ' --- Allow only valid business logic and database values ---
        ValidateMore_CadolValue(Obj)
    End Sub

    ' --- Partial routines that can be completed in a partial class ---
    Partial Private Sub FixDefault_CadolValue()
    End Sub
    Partial Private Sub FixValue_CadolValue(ByRef Value As Nullable(Of Integer))
    End Sub
    Partial Private Sub CheckValueMore_CadolValue(ByVal Value As Nullable(Of Integer))
    End Sub
    Partial Private Shared Sub ValidateMore_CadolValue(ByVal Obj As IDRIS_Cadol_Sql_Xref)
    End Sub

#End Region

#Region " Property MultiFile (String 1 Null) "

    Protected _MultiFile_Default As String = Nothing
    Protected _MultiFile As String = _MultiFile_Default
    Protected _MultiFile_Max As Integer = 1

    Public Property MultiFile() As String
        Get
            FixDefault_MultiFile()
            Return _MultiFile
        End Get
        Set(ByVal value As String)
            FixDefault_MultiFile()
            FixValue_MultiFile(value)
            CheckValue_MultiFile(value)
            If (_MultiFile Is Nothing) <> (value Is Nothing) OrElse _MultiFile <> value Then
                _MultiFile = value
                If IsLocal AndAlso Not IsFillingFields Then IsChanged = True
            End If
        End Set
    End Property

    Private Sub CheckValue_MultiFile(ByVal Value As String)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Default must be valid ---
        If Value = _MultiFile_Default Then Exit Sub
        ' --- Allow only valid values ---
        If Value IsNot Nothing Then
            If Value.Length > _MultiFile_Max Then
                Throw New SystemException(FuncName + vbCrLf + "Invalid length: " + Value.Length.ToString)
            End If
            If Value.IndexOf(vbLf) >= 0 Then
                Throw New SystemException(FuncName + vbCrLf + "Not a multiline property")
            End If
        End If
        CheckValueMore_MultiFile(Value)
    End Sub

    Protected Shared Sub Validate_MultiFile(ByVal Obj As IDRIS_Cadol_Sql_Xref)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        ' --- Re-check value before saving ---
        Obj.CheckValue_MultiFile(Obj.MultiFile)
        ' --- Allow only valid business logic and database values ---
        ValidateMore_MultiFile(Obj)
    End Sub

    ' --- Partial routines that can be completed in a partial class ---
    Partial Private Sub FixDefault_MultiFile()
    End Sub
    Partial Private Sub FixValue_MultiFile(ByRef Value As String)
    End Sub
    Partial Private Sub CheckValueMore_MultiFile(ByVal Value As String)
    End Sub
    Partial Private Shared Sub ValidateMore_MultiFile(ByVal Obj As IDRIS_Cadol_Sql_Xref)
    End Sub

#End Region

#Region " Get Routines "

    Public Shared Function GetByID(ByVal ID As Integer) As IDRIS_Cadol_Sql_Xref
        Return IDRIS_Cadol_Sql_Xref.GetBySQL(BaseQuery + FirstConj + " [ID] = " + ID.ToString)
    End Function

    Public Shared Function GetBySQL(ByVal SQLClause As String) As IDRIS_Cadol_Sql_Xref
        Dim Result As IDRIS_Cadol_Sql_Xref = Nothing
        Dim dc As New Arena_DataConn.DataConnection
        Try
            Using cnIDRIS As New SqlClient.SqlConnection(dc.ConnectionString_IDRIS)
                cnIDRIS.Open()
                Using cmd As New SqlCommand(SQLClause, cnIDRIS)
                    cmd.CommandType = CommandType.Text
                    cmd.CommandTimeout = DataConnection.SQLTimeoutSeconds
                    Dim dr As SqlDataReader = cmd.ExecuteReader(CommandBehavior.SingleRow)
                    If dr.Read Then
                        Result = New IDRIS_Cadol_Sql_Xref
                        IDRIS_Cadol_Sql_Xref.FillFields(Result, dr)
                    End If
                    dr.Close()
                End Using
            End Using
        Catch ex As Exception
            Throw ' re-throw the exception
        End Try
        Return Result
    End Function

    Public Shared Function GetAll() As List(Of IDRIS_Cadol_Sql_Xref)
        Return IDRIS_Cadol_Sql_Xref.GetAllBySQL(BaseQuery + " ORDER BY [ID]")
    End Function

    Public Shared Function GetAllBySQL(ByVal SQLClause As String) As List(Of IDRIS_Cadol_Sql_Xref)
        Dim TempIDRIS_Cadol_Sql_Xref As IDRIS_Cadol_Sql_Xref
        Dim Result As New List(Of IDRIS_Cadol_Sql_Xref)
        Dim dc As New Arena_DataConn.DataConnection
        Try
            Using cnIDRIS As New SqlClient.SqlConnection(dc.ConnectionString_IDRIS)
                cnIDRIS.Open()
                Using cmd As New SqlCommand(SQLClause, cnIDRIS)
                    cmd.CommandType = CommandType.Text
                    cmd.CommandTimeout = DataConnection.SQLTimeoutSeconds
                    Dim dr As SqlDataReader = cmd.ExecuteReader(CommandBehavior.SingleResult)
                    Do While dr.Read
                        TempIDRIS_Cadol_Sql_Xref = New IDRIS_Cadol_Sql_Xref
                        IDRIS_Cadol_Sql_Xref.FillFields(TempIDRIS_Cadol_Sql_Xref, dr)
                        Result.Add(TempIDRIS_Cadol_Sql_Xref)
                    Loop
                    dr.Close()
                End Using
            End Using
        Catch ex As Exception
            Throw ' re-throw the exception
        End Try
        Return Result
    End Function

#End Region

#Region " Internal Routines "

    Friend Overloads Shared Sub FillFields(ByVal Obj As IDRIS_Cadol_Sql_Xref, ByVal dr As SqlDataReader)
        If Obj Is Nothing Then Exit Sub
        If dr Is Nothing Then Exit Sub
        ' --- Prevent IsChanged = True while filling fields ---
        Obj.IsFillingFields = True
        ' --- ID ---
        Static _FieldNum_ID As Integer = -99 ' not set yet
        If _FieldNum_ID = -99 Then
            Try
                _FieldNum_ID = dr.GetOrdinal("ID")
            Catch ex As Exception
                _FieldNum_ID = -1 ' not found
            End Try
        End If
        If _FieldNum_ID >= 0 Then
            Obj.ID = dr.GetInt32(_FieldNum_ID)
        End If
        ' --- DATFileName ---
        Static _FieldNum_DATFileName As Integer = -99 ' not set yet
        If _FieldNum_DATFileName = -99 Then
            Try
                _FieldNum_DATFileName = dr.GetOrdinal("DATFileName")
            Catch ex As Exception
                _FieldNum_DATFileName = -1 ' not found
            End Try
        End If
        If _FieldNum_DATFileName >= 0 Then
            Obj.DATFileName = dr.GetString(_FieldNum_DATFileName)
        End If
        ' --- FormatFileName ---
        Static _FieldNum_FormatFileName As Integer = -99 ' not set yet
        If _FieldNum_FormatFileName = -99 Then
            Try
                _FieldNum_FormatFileName = dr.GetOrdinal("FormatFileName")
            Catch ex As Exception
                _FieldNum_FormatFileName = -1 ' not found
            End Try
        End If
        If _FieldNum_FormatFileName >= 0 Then
            Obj.FormatFileName = dr.GetString(_FieldNum_FormatFileName)
        End If
        ' --- SQLTableNameField ---
        Static _FieldNum_SQLTableNameField As Integer = -99 ' not set yet
        If _FieldNum_SQLTableNameField = -99 Then
            Try
                _FieldNum_SQLTableNameField = dr.GetOrdinal("SQLTableName")
            Catch ex As Exception
                _FieldNum_SQLTableNameField = -1 ' not found
            End Try
        End If
        If _FieldNum_SQLTableNameField >= 0 Then
            Obj.SQLTableNameField = dr.GetString(_FieldNum_SQLTableNameField)
        End If
        ' --- CadolKey ---
        Static _FieldNum_CadolKey As Integer = -99 ' not set yet
        If _FieldNum_CadolKey = -99 Then
            Try
                _FieldNum_CadolKey = dr.GetOrdinal("CadolKey")
            Catch ex As Exception
                _FieldNum_CadolKey = -1 ' not found
            End Try
        End If
        If _FieldNum_CadolKey < 0 OrElse dr.IsDBNull(_FieldNum_CadolKey) Then
            Obj.CadolKey = Nothing
        Else
            Obj.CadolKey = dr.GetString(_FieldNum_CadolKey)
        End If
        ' --- CadolByte ---
        Static _FieldNum_CadolByte As Integer = -99 ' not set yet
        If _FieldNum_CadolByte = -99 Then
            Try
                _FieldNum_CadolByte = dr.GetOrdinal("CadolByte")
            Catch ex As Exception
                _FieldNum_CadolByte = -1 ' not found
            End Try
        End If
        If _FieldNum_CadolByte < 0 OrElse dr.IsDBNull(_FieldNum_CadolByte) Then
            Obj.CadolByte = Nothing
        Else
            Obj.CadolByte = dr.GetInt16(_FieldNum_CadolByte)
        End If
        ' --- CadolLength ---
        Static _FieldNum_CadolLength As Integer = -99 ' not set yet
        If _FieldNum_CadolLength = -99 Then
            Try
                _FieldNum_CadolLength = dr.GetOrdinal("CadolLength")
            Catch ex As Exception
                _FieldNum_CadolLength = -1 ' not found
            End Try
        End If
        If _FieldNum_CadolLength < 0 OrElse dr.IsDBNull(_FieldNum_CadolLength) Then
            Obj.CadolLength = Nothing
        Else
            Obj.CadolLength = dr.GetInt16(_FieldNum_CadolLength)
        End If
        ' --- CadolValue ---
        Static _FieldNum_CadolValue As Integer = -99 ' not set yet
        If _FieldNum_CadolValue = -99 Then
            Try
                _FieldNum_CadolValue = dr.GetOrdinal("CadolValue")
            Catch ex As Exception
                _FieldNum_CadolValue = -1 ' not found
            End Try
        End If
        If _FieldNum_CadolValue < 0 OrElse dr.IsDBNull(_FieldNum_CadolValue) Then
            Obj.CadolValue = Nothing
        Else
            Obj.CadolValue = dr.GetInt16(_FieldNum_CadolValue)
        End If
        ' --- MultiFile ---
        Static _FieldNum_MultiFile As Integer = -99 ' not set yet
        If _FieldNum_MultiFile = -99 Then
            Try
                _FieldNum_MultiFile = dr.GetOrdinal("MultiFile")
            Catch ex As Exception
                _FieldNum_MultiFile = -1 ' not found
            End Try
        End If
        If _FieldNum_MultiFile < 0 OrElse dr.IsDBNull(_FieldNum_MultiFile) Then
            Obj.MultiFile = Nothing
        Else
            Obj.MultiFile = dr.GetString(_FieldNum_MultiFile)
        End If
        ' --- Internal Flags ---
        Obj.IsNew = False
        Obj.IsDeleted = False
        Obj.IsChanged = False
        ' --- only local objects use FillFields to populate properties ---
        Obj.IsLocal = True
        ' --- Done filling fields ---
        Obj.IsFillingFields = False
    End Sub

    Protected Overloads Shared Sub Validate(ByVal Obj As IDRIS_Cadol_Sql_Xref)
        If Obj Is Nothing Then Exit Sub
        IDRIS_Cadol_Sql_Xref.Validate_DATFileName(Obj)
        IDRIS_Cadol_Sql_Xref.Validate_FormatFileName(Obj)
        IDRIS_Cadol_Sql_Xref.Validate_SQLTableNameField(Obj)
        IDRIS_Cadol_Sql_Xref.Validate_CadolKey(Obj)
        IDRIS_Cadol_Sql_Xref.Validate_CadolByte(Obj)
        IDRIS_Cadol_Sql_Xref.Validate_CadolLength(Obj)
        IDRIS_Cadol_Sql_Xref.Validate_CadolValue(Obj)
        IDRIS_Cadol_Sql_Xref.Validate_MultiFile(Obj)
    End Sub

    Protected Overloads Sub FieldList(ByVal sb As StringBuilder)
        ' --- used in the list of fields in an INSERT INTO command ---
        With sb
            .Append("[DATFileName]")
            .Append(",") : .Append("[FormatFileName]")
            .Append(",") : .Append("[SQLTableName]")
            .Append(",") : .Append("[CadolKey]")
            .Append(",") : .Append("[CadolByte]")
            .Append(",") : .Append("[CadolLength]")
            .Append(",") : .Append("[CadolValue]")
            .Append(",") : .Append("[MultiFile]")
        End With
    End Sub

    Protected Overloads Sub ValueList(ByVal sb As StringBuilder)
        ' --- used in the list of values in an INSERT INTO command ---
        With sb
            .Append("'") : .Append(StringToSQL(Me.DATFileName)) : .Append("'")
            .Append(",") : .Append("'") : .Append(StringToSQL(Me.FormatFileName)) : .Append("'")
            .Append(",") : .Append("'") : .Append(StringToSQL(Me.SQLTableNameField)) : .Append("'")
            If Me.CadolKey IsNot Nothing Then
                .Append(",") : .Append("'") : .Append(StringToSQL(Me.CadolKey)) : .Append("'")
            Else
                .Append(",") : .Append("NULL")
            End If
            If Me.CadolByte.HasValue Then
                .Append(",") : .Append(Me.CadolByte.Value.ToString)
            Else
                .Append(",") : .Append("NULL")
            End If
            If Me.CadolLength.HasValue Then
                .Append(",") : .Append(Me.CadolLength.Value.ToString)
            Else
                .Append(",") : .Append("NULL")
            End If
            If Me.CadolValue.HasValue Then
                .Append(",") : .Append(Me.CadolValue.Value.ToString)
            Else
                .Append(",") : .Append("NULL")
            End If
            If Me.MultiFile IsNot Nothing Then
                .Append(",") : .Append("'") : .Append(StringToSQL(Me.MultiFile)) : .Append("'")
            Else
                .Append(",") : .Append("NULL")
            End If
        End With
    End Sub

    Protected Overloads Sub UpdateList(ByVal sb As StringBuilder)
        ' --- used in the SET section of an UPDATE command ---
        With sb
            .Append("[DATFileName] = '") : .Append(StringToSQL(Me.DATFileName)) : .Append("'")
            .Append(",") : .Append("[FormatFileName] = '") : .Append(StringToSQL(Me.FormatFileName)) : .Append("'")
            .Append(",") : .Append("[SQLTableName] = '") : .Append(StringToSQL(Me.SQLTableNameField)) : .Append("'")
            .Append(",") : .Append("[CadolKey] = ")
            If Me.CadolKey IsNot Nothing Then
                .Append("'") : .Append(StringToSQL(Me.CadolKey)) : .Append("'")
            Else
                .Append("NULL")
            End If
            .Append(",") : .Append("[CadolByte] = ")
            If Me.CadolByte.HasValue Then
                .Append(Me.CadolByte.Value.ToString)
            Else
                .Append("NULL")
            End If
            .Append(",") : .Append("[CadolLength] = ")
            If Me.CadolLength.HasValue Then
                .Append(Me.CadolLength.Value.ToString)
            Else
                .Append("NULL")
            End If
            .Append(",") : .Append("[CadolValue] = ")
            If Me.CadolValue.HasValue Then
                .Append(Me.CadolValue.Value.ToString)
            Else
                .Append("NULL")
            End If
            .Append(",") : .Append("[MultiFile] = ")
            If Me.MultiFile IsNot Nothing Then
                .Append("'") : .Append(StringToSQL(Me.MultiFile)) : .Append("'")
            Else
                .Append("NULL")
            End If
        End With
    End Sub

#End Region

#Region " Save Routine "

    Public Sub Save()
        Dim dc As New DataConnection
        IDRIS_Cadol_Sql_Xref.Save(Me, dc)
    End Sub

    Public Sub Save(ByVal dc As DataConnection)
        IDRIS_Cadol_Sql_Xref.Save(Me, dc)
    End Sub

    Public Shared Sub Save(ByVal Obj As IDRIS_Cadol_Sql_Xref, ByVal dc As DataConnection)
        Static FuncName As String = ObjName + "." + System.Reflection.MethodBase.GetCurrentMethod().Name
        Dim sb As New StringBuilder
        Dim cnIDRIS As SqlConnection
        ' --------------------------
        If Obj Is Nothing Then Exit Sub
        If dc Is Nothing Then Exit Sub
        ' --- delete record ---
        If Obj.IsDeleted Then
            IDRIS_Cadol_Sql_Xref.Delete(Obj, dc)
            Exit Sub
        End If
        Try
            ' --- fix record before saving if necessary ---
            FixRecordPreSave(Obj, dc)
            ' --- validate before saving ---
            IDRIS_Cadol_Sql_Xref.Validate(Obj)
            ValidateRecordLevel(Obj)
            ' --- add new record ---
            If Obj.IsNew OrElse Obj.ID.GetValueOrDefault <= 0 Then
                cnIDRIS = dc.GetConnection_IDRIS
                Using cmd As SqlCommand = cnIDRIS.CreateCommand
                    cmd.Transaction = dc.GetTransaction_IDRIS
                    With sb
                        .Append("INSERT INTO ")
                        .Append(SQLTableName)
                        .Append(" (")
                        Obj.FieldList(sb)
                        .Append(") VALUES (")
                        Obj.ValueList(sb)
                        .Append(") ; ")
                        ' --- Return the new record ---
                        .Append(BaseQuery)
                        .Append(FirstConj)
                        .Append(" [ID] = SCOPE_IDENTITY()")
                    End With
                    cmd.CommandText = sb.ToString
                    cmd.CommandType = CommandType.Text
                    cmd.CommandTimeout = DataConnection.SQLTimeoutSeconds
                    Dim dr As SqlDataReader = cmd.ExecuteReader(CommandBehavior.SingleRow)
                    If dr.Read Then
                        IDRIS_Cadol_Sql_Xref.FillFields(Obj, dr)
                    Else
                        dc.Rollback()
                        Throw New SystemException("Record unexpectedly missing.")
                    End If
                    dr.Close()
                    dc.CloseConnection(cnIDRIS)
                End Using
                Obj.IsChanged = False
            End If
            ' --- update changed record ---
            If Obj.IsChanged Then
                cnIDRIS = dc.GetConnection_IDRIS
                Using cmd As SqlCommand = cnIDRIS.CreateCommand
                    cmd.Transaction = dc.GetTransaction_IDRIS
                    With sb
                        .Append("UPDATE ")
                        .Append(SQLTableName)
                        .Append(" SET ")
                        Obj.UpdateList(sb)
                        .Append(" WHERE [ID] = ") : .Append(Obj.ID.Value.ToString)
                    End With
                    cmd.CommandText = sb.ToString
                    cmd.CommandType = CommandType.Text
                    cmd.CommandTimeout = DataConnection.SQLTimeoutSeconds
                    Dim RowsChanged As Integer = cmd.ExecuteNonQuery
                    If RowsChanged < 1 Then
                        dc.Rollback()
                        Throw New SystemException("Record unexpectedly missing or changed.")
                    End If
                    ' --- reload record to get updated values (such as RowVersion) ---
                    cmd.CommandText = BaseQuery + FirstConj + " [ID] = " + Obj.ID.Value.ToString
                    cmd.CommandType = CommandType.Text
                    cmd.CommandTimeout = DataConnection.SQLTimeoutSeconds
                    Dim dr As SqlDataReader = cmd.ExecuteReader(CommandBehavior.SingleRow)
                    If dr.Read Then
                        IDRIS_Cadol_Sql_Xref.FillFields(Obj, dr)
                    Else
                        dc.Rollback()
                        Throw New SystemException("Record unexpectedly missing.")
                    End If
                    dr.Close()
                    dc.CloseConnection(cnIDRIS)
                End Using
                Obj.IsChanged = False
            End If
            ' --- fix record after saving if necessary ---
            FixRecordPostSave(Obj, dc)
        Catch ex As Exception
            dc.Rollback()
            Throw New SystemException(FuncName + vbCrLf + "Error saving record." + vbCrLf + ex.Message)
        End Try
    End Sub

    Partial Private Shared Sub FixRecordPreSave(ByVal Obj As IDRIS_Cadol_Sql_Xref, ByVal dc As DataConnection)
    End Sub
    Partial Private Shared Sub ValidateRecordLevel(ByVal Obj As IDRIS_Cadol_Sql_Xref)
    End Sub
    Partial Private Shared Sub FixRecordPostSave(ByVal Obj As IDRIS_Cadol_Sql_Xref, ByVal dc As DataConnection)
    End Sub

#End Region

#Region " Delete Routine "

    Public Sub Delete()
        Dim dc As New DataConnection
        IDRIS_Cadol_Sql_Xref.Delete(Me, dc)
    End Sub

    Public Sub Delete(ByVal dc As DataConnection)
        IDRIS_Cadol_Sql_Xref.Delete(Me, dc)
    End Sub

    Public Shared Sub Delete(ByRef Obj As IDRIS_Cadol_Sql_Xref, ByVal dc As DataConnection)
        Dim cnIDRIS As SqlConnection
        ' --------------------------
        If Obj Is Nothing Then Exit Sub
        If dc Is Nothing Then Exit Sub
        ' --- Validate if record may be safely deleted ---
        ValidatePreDelete(Obj, dc)
        ' --- Release any resources before deleting if necessary ---
        ReleaseResourcesPreDelete(Obj, dc)
        ' --- Delete current record ---
        If Obj.ID.HasValue AndAlso Obj.ID.Value > 0 Then
            Try
                cnIDRIS = dc.GetConnection_IDRIS
                Using cmd As SqlCommand = cnIDRIS.CreateCommand
                    cmd.Transaction = dc.GetTransaction_IDRIS
                    cmd.CommandText = DeleteQuery + " WHERE [ID] = " + Obj.ID.Value.ToString
                    cmd.CommandType = CommandType.Text
                    cmd.CommandTimeout = DataConnection.SQLTimeoutSeconds
                    cmd.ExecuteNonQuery()
                End Using
                dc.CloseConnection(cnIDRIS)
            Catch ex As Exception
                dc.Rollback()
                Throw ' re-throw the exception
            End Try
        End If
        ' --- Release any resources after deleting if necessary ---
        ReleaseResourcesPostDelete(Obj, dc)
        ' --- Done ---
        Obj.ID = Nothing
        Obj.IsDeleted = True
        Obj.IsNew = False
        Obj.IsChanged = False
    End Sub

    Partial Private Shared Sub ValidatePreDelete(ByVal Obj As IDRIS_Cadol_Sql_Xref, ByVal dc As DataConnection)
    End Sub
    Partial Private Shared Sub ReleaseResourcesPreDelete(ByVal Obj As IDRIS_Cadol_Sql_Xref, ByVal dc As DataConnection)
    End Sub
    Partial Private Shared Sub ReleaseResourcesPostDelete(ByVal Obj As IDRIS_Cadol_Sql_Xref, ByVal dc As DataConnection)
    End Sub

#End Region

End Class

Public Class IDRIS_Cadol_Sql_Xref_Reader

    Implements IDisposable

#Region " Reader Routines "

    Private dc As Arena_DataConn.DataConnection
    Private cnIDRIS As SqlClient.SqlConnection
    Private cmd As SqlCommand
    Private dr As SqlDataReader

    Public Sub New(ByVal SQLClause As String)
        dc = New Arena_DataConn.DataConnection
        cnIDRIS = New SqlClient.SqlConnection(dc.ConnectionString_IDRIS)
        cnIDRIS.Open()
        cmd = New SqlCommand(SQLClause, cnIDRIS)
        cmd.CommandType = CommandType.Text
        cmd.CommandTimeout = DataConnection.SQLTimeoutSeconds
        dr = cmd.ExecuteReader(CommandBehavior.SingleResult)
    End Sub

    Public Function ReadNext() As IDRIS_Cadol_Sql_Xref
        If dr.Read Then
            Dim TempIDRIS_Cadol_Sql_Xref As New IDRIS_Cadol_Sql_Xref
            IDRIS_Cadol_Sql_Xref.FillFields(TempIDRIS_Cadol_Sql_Xref, dr)
            Return TempIDRIS_Cadol_Sql_Xref
        End If
        Return Nothing
    End Function

#End Region

#Region " IDisposable Support "

    Private disposedValue As Boolean

    Protected Overridable Sub Dispose(disposing As Boolean)
        If Not Me.disposedValue Then
            If disposing Then
                If cmd IsNot Nothing Then
                    cmd.Cancel()
                    cmd.Dispose()
                End If
                If dr IsNot Nothing Then dr.Close()
                If cnIDRIS IsNot Nothing Then cnIDRIS.Close()
                If dc IsNot Nothing Then dc.Dispose()
            End If
        End If
        Me.disposedValue = True
    End Sub

    Public Sub Dispose() Implements IDisposable.Dispose
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub

#End Region

End Class
