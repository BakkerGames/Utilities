// $SCHEMANAMESQL$.$TABLENAME$.cs

// This file is automatically generated. Please don't change!

// This table has no Identity/GUID field, so it is read-only here.

using Arena.Common.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Text;

namespace $NAMESPACE$
{
    public class $CLASSNAME$
    {
        #region Private Fields

        private static string _baseQuery = "SELECT * FROM $SCHEMANAMESQL$.$TABLENAME$";
        private static string _firstConj = "WHERE";

        private static string _fieldList;

        // specific properties
$ORDDEFS$

        #endregion

        #region Public Properties

        // specific properties
$PROPERTIES$

        #endregion

        #region Constructors

        static $CLASSNAME$()
        {
            // get list of fields for queries
            _fieldList = GetFieldList();
            // make ordinal positions match field list positions
            SetOrdinals();
            // update base query with exact field names
            _baseQuery = _baseQuery.Replace("*", _fieldList);
        }

        #endregion

        #region Get Routines

        public static $CLASSNAME$ Get(DataPlug dp, string subquery)
        {
            if (dp == null)
            {
                throw new ArgumentNullException("dp");
            }
            if (string.IsNullOrEmpty(subquery))
            {
                throw new ArgumentNullException("subquery");
            }
            $CLASSNAME$ result = null;
            try
            {
                using (SqlConnection dc = SQL.GetDataConnection(dp))
                {
                    dc.Open();
                    string query = $"{_baseQuery} {_firstConj} {subquery};";
                    SqlCommand cmd = new SqlCommand(query, dc)
                    {
                        CommandType = CommandType.Text,
                        CommandTimeout = SQL.SQLTimeoutSeconds
                    };
                    using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.SingleRow))
                    {
                        if (dr.Read())
                        {
                            result = new $CLASSNAME$();
                            FillFields(result, dr);
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                throw new SystemException($"SQL Exception {ex.Number} during Get: {ex.Message}");
            }
            catch (Exception ex)
            {
                throw new SystemException($"Error during Get: {ex.Message}");
            }
            return result;
        }

        public static List<$CLASSNAME$> GetList(DataPlug dp)
        {
            return GetList(dp, null, null);
        }

        public static List<$CLASSNAME$> GetList(DataPlug dp, string subquery)
        {
            return GetList(dp, subquery, null);
        }

        public static List<$CLASSNAME$> GetList(DataPlug dp, string subquery, string orderby)
        {
            if (dp == null)
            {
                throw new ArgumentNullException("dp");
            }
            List<$CLASSNAME$> result = null;
            $CLASSNAME$ obj;
            try
            {
                using (SqlConnection dc = SQL.GetDataConnection(dp))
                {
                    dc.Open();
                    string query;
                    if (string.IsNullOrEmpty(subquery))
                    {
                        query = _baseQuery;
                    }
                    else
                    {
                        query = $"{_baseQuery} {_firstConj} {subquery}";
                    }
                    if (!string.IsNullOrEmpty(orderby))
                    {
                        query = $"{query} ORDER BY {orderby}";
                    }
                    SqlCommand cmd = new SqlCommand(query, dc)
                    {
                        CommandType = CommandType.Text,
                        CommandTimeout = SQL.SQLTimeoutSeconds
                    };
                    using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.SingleResult))
                    {
                        while (dr.Read())
                        {
                            if (result == null)
                            {
                                result = new List<$CLASSNAME$>();
                            }
                            obj = new $CLASSNAME$();
                            FillFields(obj, dr);
                            result.Add(obj);
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                throw new SystemException($"SQL Exception {ex.Number} during GetList: {ex.Message}");
            }
            catch (Exception ex)
            {
                throw new SystemException($"Error during GetList: {ex.Message}");
            }
            return result;
        }

        #endregion

        #region Private Routines

        private static string GetFieldList()
        {
            // get list of all fields for queries
            StringBuilder sb = new StringBuilder();
$GETFIELDLIST$
            return sb.ToString();
        }

        private static void SetOrdinals()
        {
            // make ordinal positions match field list positions
$SETORDINALS$
        }

        private static void FillFields($CLASSNAME$ obj, SqlDataReader dr)
        {
            // fill object from data reader
$FILLFIELDS$
        }

        #endregion

    }
}
