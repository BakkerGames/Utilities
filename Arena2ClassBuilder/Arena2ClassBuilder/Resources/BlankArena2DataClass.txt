// $SCHEMANAMESQL$.$TABLENAME$.cs

// This file is automatically generated. Please don't change!

using Arena.Common.Data;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Text;

public class $CLASSNAME$
{
    #region Private Fields

    private static string _tableName = "$SCHEMANAMESQL$.$TABLENAME$";

    private static string _baseQuery = $"SELECT * FROM {_tableName}";
    private static string _firstConj = "WHERE";

    private static string _fieldList;
    private static string _fieldListInsert;

    // standard properties
    private static int _ordID;
    private static int _ordIDCode;
    private static int _ordRowVersion;
    private static int _ordLastChanged;
    private static int _ordChangedBy;

    // specific properties
$ORDDEFS$

    #endregion

    #region Public Properties

    // standard properties
    public int? ID { get; set; }
    public Guid? IDCode { get; set; }
    public long? RowVersion { get; set; }
    public DateTime? LastChanged { get; set; }
    public string ChangedBy { get; set; }

    // specific properties
$PROPERTIES$

    #endregion

    #region Constructors

    static $CLASSNAME$()
    {
        // get list of fields for queries
        _fieldList = GetFieldList();
        // get list of fields for inserts
        _fieldListInsert = GetInsertFieldList();
        // make ordinal positions match field list positions
        SetOrdinals();
        // update base query with exact field names
        _baseQuery = _baseQuery.Replace("*", _fieldList);
    }

    #endregion

    #region Get Routines

    public static $CLASSNAME$ Get(DataPlug dp, string subquery)
    {
        if (dp == null)
        {
            throw new ArgumentNullException("dp");
        }
        if (string.IsNullOrEmpty(subquery))
        {
            throw new ArgumentNullException("subquery");
        }
        $CLASSNAME$ result = null;
        try
        {
            using (SqlConnection dc = SQL.GetDataConnection(dp))
            {
                dc.Open();
                string query = $"{_baseQuery} {_firstConj} {subquery};";
                SqlCommand cmd = new SqlCommand(query, dc);
                cmd.CommandType = CommandType.Text;
                cmd.CommandTimeout = SQL.SQLTimeoutSeconds;
                using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.SingleRow))
                {
                    if (dr.Read())
                    {
                        result = new $CLASSNAME$();
                        FillFields(result, dr);
                    }
                }
            }
        }
        catch (SqlException ex)
        {
            throw new SystemException($"SQL Exception {ex.Number} during Get: {ex.Message}");
        }
        catch (Exception ex)
        {
            throw new SystemException($"Error during Get: {ex.Message}");
        }
        return result;
    }

    public static List<$CLASSNAME$> GetList(DataPlug dp, string subquery)
    {
        if (dp == null)
        {
            throw new ArgumentNullException("dp");
        }
        List<$CLASSNAME$> result = null;
        $CLASSNAME$ obj;
        try
        {
            using (SqlConnection dc = SQL.GetDataConnection(dp))
            {
                dc.Open();
                string query;
                if (string.IsNullOrEmpty(subquery))
                {
                    query = _baseQuery;
                }
                else
                {
                    query = $"{_baseQuery} {_firstConj} {subquery};";
                }
                SqlCommand cmd = new SqlCommand(query, dc);
                cmd.CommandType = CommandType.Text;
                cmd.CommandTimeout = SQL.SQLTimeoutSeconds;
                using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.SingleResult))
                {
                    while (dr.Read())
                    {
                        if (result == null)
                        {
                            result = new List<$CLASSNAME$>();
                        }
                        obj = new $CLASSNAME$();
                        FillFields(obj, dr);
                        result.Add(obj);
                    }
                }
            }
        }
        catch (SqlException ex)
        {
            throw new SystemException($"SQL Exception {ex.Number} during GetList: {ex.Message}");
        }
        catch (Exception ex)
        {
            throw new SystemException($"Error during GetList: {ex.Message}");
        }
        return result;
    }

    public static void Reload(DataPlug dp, $CLASSNAME$ obj)
    {
        if (dp == null)
        {
            throw new ArgumentNullException("dp");
        }
        if (obj == null)
        {
            throw new ArgumentNullException("obj");
        }
        if (!obj.ID.HasValue)
        {
            throw new SystemException("New record cannot be reloaded");
        }
        try
        {
            using (SqlConnection dc = SQL.GetDataConnection(dp))
            {
                dc.Open();
                string query = $"{_baseQuery} {_firstConj} [ID] = {obj.ID};";
                SqlCommand cmd = new SqlCommand(query, dc);
                cmd.CommandType = CommandType.Text;
                cmd.CommandTimeout = SQL.SQLTimeoutSeconds;
                using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.SingleRow))
                {
                    if (dr.Read())
                    {
                        // fill same object
                        FillFields(obj, dr);
                    }
                    else
                    {
                        throw new SystemException($"Record not found during Reload: ID = {obj.ID}");
                    }
                }
            }
        }
        catch (SqlException ex)
        {
            throw new SystemException($"SQL Exception {ex.Number} during Reload: {ex.Message}");
        }
        catch (Exception ex)
        {
            throw new SystemException($"Error during Reload: {ex.Message}");
        }

    }

    #endregion

    #region Save Routines

    public static void Add(DataPlug dp, $CLASSNAME$ obj)
    {
        if (dp == null)
        {
            throw new ArgumentNullException("dp");
        }
        if (obj == null)
        {
            throw new ArgumentNullException("obj");
        }
        if (obj.ID.HasValue)
        {
            throw new SystemException("Existing record cannot be added");
        }
        StringBuilder sb = new StringBuilder();
        sb.Append("INSERT INTO ");
        sb.Append(_tableName);
        sb.Append(" (");
        sb.Append(_fieldListInsert);
        if (obj.IDCode.HasValue)
        {
            sb.Append(", IDCode");
        }
        sb.Append(") VALUES (");
        sb.Append(GetInsertValueList(obj));
        if (obj.IDCode.HasValue)
        {
            sb.Append(", ");
            sb.Append(obj.IDCode.ToString());
        }
        sb.Append("); SELECT SCOPE_IDENTITY();");
        try
        {
            using (SqlConnection dc = SQL.GetDataConnection(dp))
            {
                dc.Open();
                SqlCommand cmd = new SqlCommand(sb.ToString(), dc);
                cmd.CommandType = CommandType.Text;
                cmd.CommandTimeout = SQL.SQLTimeoutSeconds;
                using (SqlDataReader dr = cmd.ExecuteReader(CommandBehavior.SingleRow))
                {
                    if (dr.Read())
                    {
                        obj.ID = (int)dr.GetDecimal(0); // SCOPE_IDENTITY()
                    }
                    else
                    {
                        throw new SystemException("No rows inserted during Add");
                    }
                }
                obj.RowVersion = null; // RowVersion is unknown, must reload
            }

        }
        catch (SqlException ex)
        {
            throw new SystemException($"SQL Exception {ex.Number} during Add: {ex.Message}");
        }
        catch (Exception ex)
        {
            throw new SystemException($"Error during Add: {ex.Message}");
        }
    }

    public static void Update(DataPlug dp, $CLASSNAME$ obj)
    {
        if (dp == null)
        {
            throw new ArgumentNullException("dp");
        }
        if (obj == null)
        {
            throw new ArgumentNullException("obj");
        }
        if (!obj.ID.HasValue)
        {
            throw new SystemException("New record cannot be updated");
        }
        if (!obj.RowVersion.HasValue)
        {
            throw new SystemException($"Record has not been reloaded since last Add/Update: ID = {obj.ID}");
        }
        StringBuilder sb = new StringBuilder();
        sb.Append("UPDATE ");
        sb.Append(_tableName);
        sb.Append(" SET ");
        sb.Append(GetUpdateValueList(obj));
        sb.Append(" WHERE [ID] = ");
        sb.Append(obj.ID);
        sb.Append(" AND [RowVersion] = ");
        sb.Append(obj.RowVersion);
        sb.Append(";");
        try
        {
            using (SqlConnection dc = SQL.GetDataConnection(dp))
            {
                dc.Open();
                SqlCommand cmd = new SqlCommand(sb.ToString(), dc);
                cmd.CommandType = CommandType.Text;
                cmd.CommandTimeout = SQL.SQLTimeoutSeconds;
                int rowsChanged = cmd.ExecuteNonQuery();
                if (rowsChanged == 0)
                {
                    throw new SystemException($"No rows changed during Update: ID = {obj.ID}, RowVersion = {obj.RowVersion}");
                }
            }
            obj.RowVersion = null; // RowVersion is unknown, must reload
        }
        catch (SqlException ex)
        {
            throw new SystemException($"SQL Exception {ex.Number} during Update: {ex.Message}");
        }
        catch (Exception ex)
        {
            throw new SystemException($"Error during Update: {ex.Message}");
        }
    }

    #endregion

    #region Delete Routines

    public static void Delete(DataPlug dp, ref $CLASSNAME$ obj)
    {
        if (dp == null)
        {
            throw new ArgumentNullException("dp");
        }
        if (obj == null)
        {
            throw new ArgumentNullException("obj");
        }
        if (!obj.ID.HasValue)
        {
            throw new SystemException("New record cannot be deleted");
        }
        if (!obj.RowVersion.HasValue)
        {
            throw new SystemException($"Record has not been reloaded since last Add/Update: ID = {obj.ID}");
        }
        StringBuilder sb = new StringBuilder();
        sb.Append("DELETE FROM ");
        sb.Append(_tableName);
        sb.Append(" WHERE [ID] = ");
        sb.Append(obj.ID);
        sb.Append(" AND [RowVersion] = ");
        sb.Append(obj.RowVersion);
        sb.Append(";");
        try
        {
            using (SqlConnection dc = SQL.GetDataConnection(dp))
            {
                dc.Open();
                SqlCommand cmd = new SqlCommand(sb.ToString(), dc);
                cmd.CommandType = CommandType.Text;
                cmd.CommandTimeout = SQL.SQLTimeoutSeconds;
                int rowsChanged = cmd.ExecuteNonQuery();
                if (rowsChanged == 0)
                {
                    throw new SystemException($"No rows changed during Delete: ID = {obj.ID}, RowVersion = {obj.RowVersion}");
                }
            }
            obj = null; // no longer exists
        }
        catch (SqlException ex)
        {
            throw new SystemException($"SQL Exception {ex.Number} during Delete: {ex.Message}");
        }
        catch (Exception ex)
        {
            throw new SystemException($"Error during Delete: {ex.Message}");
        }
    }

    #endregion

    #region Private Routines

    private static string GetFieldList()
    {
        // get list of all fields for queries
        StringBuilder sb = new StringBuilder();
        sb.Append("[ID]");
        sb.Append(", [IDCode]");
        sb.Append(", CONVERT(BIGINT,[RowVersion]) AS [RowVersion]");
        sb.Append(", [LastChanged]");
        sb.Append(", [ChangedBy]");
$GETFIELDLIST$
        return sb.ToString();
    }

    private static string GetInsertFieldList()
    {
        // get list of fields for updates
        StringBuilder sb = new StringBuilder();
$GETINSERTFIELDLIST$
        return sb.ToString();
    }

    private static string GetInsertValueList($CLASSNAME$ obj)
    {
        // create list of values for updates
        StringBuilder sb = new StringBuilder();
$GETINSERTVALUELIST$
        return sb.ToString();
    }

    private static string GetUpdateValueList($CLASSNAME$ obj)
    {
        // create list of values for updates
        StringBuilder sb = new StringBuilder();
$GETUPDATEVALUELIST$
        return sb.ToString();
    }

    private static void SetOrdinals()
    {
        // make ordinal positions match field list positions
        _ordID = 0;
        _ordIDCode = 1;
        _ordRowVersion = 2;
        _ordLastChanged = 3;
        _ordChangedBy = 4;
$SETORDINALS$
    }

    private static void FillFields($CLASSNAME$ obj, SqlDataReader dr)
    {
        // fill object from data reader
        obj.ID = dr.GetInt32(_ordID);
        obj.IDCode = dr.GetGuid(_ordIDCode);
        obj.RowVersion = dr.GetInt64(_ordRowVersion);
        obj.LastChanged = dr.GetDateTime(_ordLastChanged);
        obj.ChangedBy = dr.GetString(_ordChangedBy);
$FILLFIELDS$
    }

    #endregion

}
